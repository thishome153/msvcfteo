// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX__SCHEMES_KVZU_KVZU_V06_PSKEL_HXX
#define CXX__SCHEMES_KVZU_KVZU_V06_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace KVZU
{
  class tParcel_pskel;
  class tSubParcel_pskel;
  class tContour_pskel;
  class tEntryParcel_pskel;
  class tAreaOut_pskel;
  class tAreaWithoutInaccuracyOut_pskel;
  class tUtilization_pskel;
  class tCadastralNumbersOut_pskel;
  class tLocation_pskel;
  class tElaborationLocation_pskel;
  class tRight_pskel;
  class tEncumbranceZU_pskel;
  class tShare_pskel;
  class tRegistration_pskel;
  class tDuration_pskel;
  class tOwners_pskel;
  class tOwner_pskel;
  class tContactOwner_pskel;
  class tOwnerRestrictionInFavorem_pskel;
  class tNameOwner_pskel;
  class tEngineerOut_pskel;
  class tOrganizationNameOut_pskel;
  class KVZU_pskel;
  class Rights_pskel;
  class SubParcels_pskel;
  class Contours_pskel;
  class CompositionEZ_pskel;
  class Encumbrances_pskel;
  class ParcelNeighbours_pskel;
  class Documents_pskel;
  class Owner_pskel;
  class Person_pskel;
  class Parcels_pskel;
  class Contractors_pskel;
  class ParcelNeighbour_pskel;
  class OffspringParcel_pskel;
  class Contractor_pskel;
  class OwnerNeighbour_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

#include "../schemacommon/p_commonsimpletype_v01-pskel.hxx"

#include "../schemacommon/p_commonsimpletype_v02-pskel.hxx"

#include "../schemacommonsmev/smev-supplementary-commons-1.0.1-pskel.hxx"

#include "../schemacommon/_certificationdoc_v01-pskel.hxx"

#include "../schemacommon/_addressout_v03-pskel.hxx"

#include "../schemacommon/_numbers_v01-pskel.hxx"

#include "../schemacommon/_cadastralcost_v01-pskel.hxx"

#include "../schemacommon/_naturalobjects_v01-pskel.hxx"

#include "../schemacommon/_spatial_v02-pskel.hxx"

#include "../schemacommon/_documentout_v03-pskel.hxx"

#include "../schemacommon/dcategories_v01-pskel.hxx"

#include "../schemacommon/dutilizations_v01-pskel.hxx"

#include "../schemacommon/dunit_v01-pskel.hxx"

#include "../schemacommon/dstates_v01-pskel.hxx"

#include "../schemacommon/dparcels_v01-pskel.hxx"

#include "../schemacommon/drights_v01-pskel.hxx"

#include "../schemacommon/dencumbrances_v02-pskel.hxx"

namespace KVZU
{
  class tParcel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    CadastralBlock ();

    virtual void
    Name ();

    virtual void
    OldNumbers ();

    virtual void
    PrevCadastralNumbers ();

    virtual void
    InnerCadastralNumbers ();

    virtual void
    Area ();

    virtual void
    Location ();

    virtual void
    Category ();

    virtual void
    Utilization ();

    virtual void
    NaturalObjects ();

    virtual void
    Rights ();

    virtual void
    SubParcels ();

    virtual void
    EntitySpatial ();

    virtual void
    Contours ();

    virtual void
    CompositionEZ ();

    virtual void
    Encumbrances ();

    virtual void
    CadastralCost ();

    virtual void
    SpecialNote (const ::std::string&);

    virtual void
    ParcelNeighbours ();

    virtual void
    AllOffspringParcel ();

    virtual void
    CadastralNumber ();

    virtual void
    State ();

    virtual void
    DateExpiry (const ::xml_schema::date&);

    virtual void
    DateCreated (const ::xml_schema::date&);

    virtual void
    DateRemoved (const ::xml_schema::date&);

    virtual void
    DateCreatedDoc (const ::xml_schema::date&);

    virtual void
    post_tParcel ();

    // Parser construction API.
    //
    void
    CadastralBlock_parser (::KVZU::Simple1::s40_pskel&);

    void
    Name_parser (::KVZU::dParc1::dParcels_pskel&);

    void
    OldNumbers_parser (::KVZU::Num1::tOldNumbers_pskel&);

    void
    PrevCadastralNumbers_parser (::KVZU::tCadastralNumbersOut_pskel&);

    void
    InnerCadastralNumbers_parser (::KVZU::tCadastralNumbersOut_pskel&);

    void
    Area_parser (::KVZU::tAreaOut_pskel&);

    void
    Location_parser (::KVZU::tLocation_pskel&);

    void
    Category_parser (::KVZU::dCateg1::dCategories_pskel&);

    void
    Utilization_parser (::KVZU::tUtilization_pskel&);

    void
    NaturalObjects_parser (::KVZU::NatObj1::tNaturalObjects_pskel&);

    void
    Rights_parser (::KVZU::Rights_pskel&);

    void
    SubParcels_parser (::KVZU::SubParcels_pskel&);

    void
    EntitySpatial_parser (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel&);

    void
    Contours_parser (::KVZU::Contours_pskel&);

    void
    CompositionEZ_parser (::KVZU::CompositionEZ_pskel&);

    void
    Encumbrances_parser (::KVZU::Encumbrances_pskel&);

    void
    CadastralCost_parser (::KVZU::Cos1::tCadastralCost_pskel&);

    void
    SpecialNote_parser (::xml_schema::string_pskel&);

    void
    ParcelNeighbours_parser (::KVZU::ParcelNeighbours_pskel&);

    void
    AllOffspringParcel_parser (::KVZU::tCadastralNumbersOut_pskel&);

    void
    CadastralNumber_parser (::KVZU::Simple1::s40_pskel&);

    void
    State_parser (::KVZU::dStat1::dStates_pskel&);

    void
    DateExpiry_parser (::xml_schema::date_pskel&);

    void
    DateCreated_parser (::xml_schema::date_pskel&);

    void
    DateRemoved_parser (::xml_schema::date_pskel&);

    void
    DateCreatedDoc_parser (::xml_schema::date_pskel&);

    void
    parsers (::KVZU::Simple1::s40_pskel& /* CadastralBlock */,
             ::KVZU::dParc1::dParcels_pskel& /* Name */,
             ::KVZU::Num1::tOldNumbers_pskel& /* OldNumbers */,
             ::KVZU::tCadastralNumbersOut_pskel& /* PrevCadastralNumbers */,
             ::KVZU::tCadastralNumbersOut_pskel& /* InnerCadastralNumbers */,
             ::KVZU::tAreaOut_pskel& /* Area */,
             ::KVZU::tLocation_pskel& /* Location */,
             ::KVZU::dCateg1::dCategories_pskel& /* Category */,
             ::KVZU::tUtilization_pskel& /* Utilization */,
             ::KVZU::NatObj1::tNaturalObjects_pskel& /* NaturalObjects */,
             ::KVZU::Rights_pskel& /* Rights */,
             ::KVZU::SubParcels_pskel& /* SubParcels */,
             ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel& /* EntitySpatial */,
             ::KVZU::Contours_pskel& /* Contours */,
             ::KVZU::CompositionEZ_pskel& /* CompositionEZ */,
             ::KVZU::Encumbrances_pskel& /* Encumbrances */,
             ::KVZU::Cos1::tCadastralCost_pskel& /* CadastralCost */,
             ::xml_schema::string_pskel& /* SpecialNote */,
             ::KVZU::ParcelNeighbours_pskel& /* ParcelNeighbours */,
             ::KVZU::tCadastralNumbersOut_pskel& /* AllOffspringParcel */,
             ::KVZU::Simple1::s40_pskel& /* CadastralNumber */,
             ::KVZU::dStat1::dStates_pskel& /* State */,
             ::xml_schema::date_pskel& /* DateExpiry */,
             ::xml_schema::date_pskel& /* DateCreated */,
             ::xml_schema::date_pskel& /* DateRemoved */,
             ::xml_schema::date_pskel& /* DateCreatedDoc */);

    // Constructor.
    //
    tParcel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s40_pskel* CadastralBlock_parser_;
    ::KVZU::dParc1::dParcels_pskel* Name_parser_;
    ::KVZU::Num1::tOldNumbers_pskel* OldNumbers_parser_;
    ::KVZU::tCadastralNumbersOut_pskel* PrevCadastralNumbers_parser_;
    ::KVZU::tCadastralNumbersOut_pskel* InnerCadastralNumbers_parser_;
    ::KVZU::tAreaOut_pskel* Area_parser_;
    ::KVZU::tLocation_pskel* Location_parser_;
    ::KVZU::dCateg1::dCategories_pskel* Category_parser_;
    ::KVZU::tUtilization_pskel* Utilization_parser_;
    ::KVZU::NatObj1::tNaturalObjects_pskel* NaturalObjects_parser_;
    ::KVZU::Rights_pskel* Rights_parser_;
    ::KVZU::SubParcels_pskel* SubParcels_parser_;
    ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel* EntitySpatial_parser_;
    ::KVZU::Contours_pskel* Contours_parser_;
    ::KVZU::CompositionEZ_pskel* CompositionEZ_parser_;
    ::KVZU::Encumbrances_pskel* Encumbrances_parser_;
    ::KVZU::Cos1::tCadastralCost_pskel* CadastralCost_parser_;
    ::xml_schema::string_pskel* SpecialNote_parser_;
    ::KVZU::ParcelNeighbours_pskel* ParcelNeighbours_parser_;
    ::KVZU::tCadastralNumbersOut_pskel* AllOffspringParcel_parser_;
    ::KVZU::Simple1::s40_pskel* CadastralNumber_parser_;
    ::KVZU::dStat1::dStates_pskel* State_parser_;
    ::xml_schema::date_pskel* DateExpiry_parser_;
    ::xml_schema::date_pskel* DateCreated_parser_;
    ::xml_schema::date_pskel* DateRemoved_parser_;
    ::xml_schema::date_pskel* DateCreatedDoc_parser_;
  };

  class tSubParcel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Area ();

    virtual void
    Encumbrance ();

    virtual void
    EntitySpatial ();

    virtual void
    NumberRecord ();

    virtual void
    Full (bool);

    virtual void
    State ();

    virtual void
    DateExpiry (const ::xml_schema::date&);

    virtual void
    post_tSubParcel ();

    // Parser construction API.
    //
    void
    Area_parser (::KVZU::tAreaWithoutInaccuracyOut_pskel&);

    void
    Encumbrance_parser (::KVZU::tEncumbranceZU_pskel&);

    void
    EntitySpatial_parser (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel&);

    void
    NumberRecord_parser (::KVZU::Simple1::s40_pskel&);

    void
    Full_parser (::xml_schema::boolean_pskel&);

    void
    State_parser (::KVZU::dStat1::dStates_pskel&);

    void
    DateExpiry_parser (::xml_schema::date_pskel&);

    void
    parsers (::KVZU::tAreaWithoutInaccuracyOut_pskel& /* Area */,
             ::KVZU::tEncumbranceZU_pskel& /* Encumbrance */,
             ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel& /* EntitySpatial */,
             ::KVZU::Simple1::s40_pskel& /* NumberRecord */,
             ::xml_schema::boolean_pskel& /* Full */,
             ::KVZU::dStat1::dStates_pskel& /* State */,
             ::xml_schema::date_pskel& /* DateExpiry */);

    // Constructor.
    //
    tSubParcel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tAreaWithoutInaccuracyOut_pskel* Area_parser_;
    ::KVZU::tEncumbranceZU_pskel* Encumbrance_parser_;
    ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel* EntitySpatial_parser_;
    ::KVZU::Simple1::s40_pskel* NumberRecord_parser_;
    ::xml_schema::boolean_pskel* Full_parser_;
    ::KVZU::dStat1::dStates_pskel* State_parser_;
    ::xml_schema::date_pskel* DateExpiry_parser_;
  };

  class tContour_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Area ();

    virtual void
    EntitySpatial ();

    virtual void
    NumberRecord ();

    virtual void
    post_tContour ();

    // Parser construction API.
    //
    void
    Area_parser (::KVZU::tAreaWithoutInaccuracyOut_pskel&);

    void
    EntitySpatial_parser (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel&);

    void
    NumberRecord_parser (::KVZU::Simple1::p10_pskel&);

    void
    parsers (::KVZU::tAreaWithoutInaccuracyOut_pskel& /* Area */,
             ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel& /* EntitySpatial */,
             ::KVZU::Simple1::p10_pskel& /* NumberRecord */);

    // Constructor.
    //
    tContour_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tAreaWithoutInaccuracyOut_pskel* Area_parser_;
    ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel* EntitySpatial_parser_;
    ::KVZU::Simple1::p10_pskel* NumberRecord_parser_;
  };

  class tEntryParcel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Area ();

    virtual void
    EntitySpatial ();

    virtual void
    CadastralNumber ();

    virtual void
    State ();

    virtual void
    DateRemoved (const ::xml_schema::date&);

    virtual void
    post_tEntryParcel ();

    // Parser construction API.
    //
    void
    Area_parser (::KVZU::tAreaWithoutInaccuracyOut_pskel&);

    void
    EntitySpatial_parser (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel&);

    void
    CadastralNumber_parser (::KVZU::Simple1::s40_pskel&);

    void
    State_parser (::KVZU::dStat1::dStates_pskel&);

    void
    DateRemoved_parser (::xml_schema::date_pskel&);

    void
    parsers (::KVZU::tAreaWithoutInaccuracyOut_pskel& /* Area */,
             ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel& /* EntitySpatial */,
             ::KVZU::Simple1::s40_pskel& /* CadastralNumber */,
             ::KVZU::dStat1::dStates_pskel& /* State */,
             ::xml_schema::date_pskel& /* DateRemoved */);

    // Constructor.
    //
    tEntryParcel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tAreaWithoutInaccuracyOut_pskel* Area_parser_;
    ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel* EntitySpatial_parser_;
    ::KVZU::Simple1::s40_pskel* CadastralNumber_parser_;
    ::KVZU::dStat1::dStates_pskel* State_parser_;
    ::xml_schema::date_pskel* DateRemoved_parser_;
  };

  class tAreaOut_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Area ();

    virtual void
    Unit ();

    virtual void
    Inaccuracy ();

    virtual void
    post_tAreaOut ();

    // Parser construction API.
    //
    void
    Area_parser (::KVZU::Simple2::nn20_pskel&);

    void
    Unit_parser (::KVZU::dUn1::dUnit_pskel&);

    void
    Inaccuracy_parser (::KVZU::Simple1::d20_2_pskel&);

    void
    parsers (::KVZU::Simple2::nn20_pskel& /* Area */,
             ::KVZU::dUn1::dUnit_pskel& /* Unit */,
             ::KVZU::Simple1::d20_2_pskel& /* Inaccuracy */);

    // Constructor.
    //
    tAreaOut_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple2::nn20_pskel* Area_parser_;
    ::KVZU::dUn1::dUnit_pskel* Unit_parser_;
    ::KVZU::Simple1::d20_2_pskel* Inaccuracy_parser_;
  };

  class tAreaWithoutInaccuracyOut_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Area ();

    virtual void
    Unit ();

    virtual void
    post_tAreaWithoutInaccuracyOut ();

    // Parser construction API.
    //
    void
    Area_parser (::KVZU::Simple1::d20_2_pskel&);

    void
    Unit_parser (::KVZU::dUn1::dUnit_pskel&);

    void
    parsers (::KVZU::Simple1::d20_2_pskel& /* Area */,
             ::KVZU::dUn1::dUnit_pskel& /* Unit */);

    // Constructor.
    //
    tAreaWithoutInaccuracyOut_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::d20_2_pskel* Area_parser_;
    ::KVZU::dUn1::dUnit_pskel* Unit_parser_;
  };

  class tUtilization_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Utilization ();

    virtual void
    ByDoc ();

    virtual void
    post_tUtilization ();

    // Parser construction API.
    //
    void
    Utilization_parser (::KVZU::dUtz1::dUtilizations_pskel&);

    void
    ByDoc_parser (::KVZU::Simple1::s4000_pskel&);

    void
    parsers (::KVZU::dUtz1::dUtilizations_pskel& /* Utilization */,
             ::KVZU::Simple1::s4000_pskel& /* ByDoc */);

    // Constructor.
    //
    tUtilization_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::dUtz1::dUtilizations_pskel* Utilization_parser_;
    ::KVZU::Simple1::s4000_pskel* ByDoc_parser_;
  };

  class tCadastralNumbersOut_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    CadastralNumber ();

    virtual void
    post_tCadastralNumbersOut ();

    // Parser construction API.
    //
    void
    CadastralNumber_parser (::KVZU::Simple1::s40_pskel&);

    void
    parsers (::KVZU::Simple1::s40_pskel& /* CadastralNumber */);

    // Constructor.
    //
    tCadastralNumbersOut_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s40_pskel* CadastralNumber_parser_;
  };

  class tLocation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    inBounds ();

    virtual void
    Placed ();

    virtual void
    Elaboration ();

    virtual void
    Address ();

    virtual void
    post_tLocation ();

    // Parser construction API.
    //
    void
    inBounds_parser (::KVZU::Simple2::sInBounds_pskel&);

    void
    Placed_parser (::KVZU::Simple1::s6_pskel&);

    void
    Elaboration_parser (::KVZU::tElaborationLocation_pskel&);

    void
    Address_parser (::KVZU::adrOut3::tAddressOut_pskel&);

    void
    parsers (::KVZU::Simple2::sInBounds_pskel& /* inBounds */,
             ::KVZU::Simple1::s6_pskel& /* Placed */,
             ::KVZU::tElaborationLocation_pskel& /* Elaboration */,
             ::KVZU::adrOut3::tAddressOut_pskel& /* Address */);

    // Constructor.
    //
    tLocation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple2::sInBounds_pskel* inBounds_parser_;
    ::KVZU::Simple1::s6_pskel* Placed_parser_;
    ::KVZU::tElaborationLocation_pskel* Elaboration_parser_;
    ::KVZU::adrOut3::tAddressOut_pskel* Address_parser_;
  };

  class tElaborationLocation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ReferenceMark ();

    virtual void
    Distance ();

    virtual void
    Direction ();

    virtual void
    post_tElaborationLocation ();

    // Parser construction API.
    //
    void
    ReferenceMark_parser (::KVZU::Simple1::s255_pskel&);

    void
    Distance_parser (::KVZU::Simple1::s255_pskel&);

    void
    Direction_parser (::KVZU::Simple1::s255_pskel&);

    void
    parsers (::KVZU::Simple1::s255_pskel& /* ReferenceMark */,
             ::KVZU::Simple1::s255_pskel& /* Distance */,
             ::KVZU::Simple1::s255_pskel& /* Direction */);

    // Constructor.
    //
    tElaborationLocation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s255_pskel* ReferenceMark_parser_;
    ::KVZU::Simple1::s255_pskel* Distance_parser_;
    ::KVZU::Simple1::s255_pskel* Direction_parser_;
  };

  class tRight_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    Type ();

    virtual void
    Owners ();

    virtual void
    Share ();

    virtual void
    ShareText ();

    virtual void
    Desc ();

    virtual void
    Registration ();

    virtual void
    Documents ();

    virtual void
    post_tRight ();

    // Parser construction API.
    //
    void
    Name_parser (::KVZU::Simple1::s255_pskel&);

    void
    Type_parser (::KVZU::dRi1::dRights_pskel&);

    void
    Owners_parser (::KVZU::tOwners_pskel&);

    void
    Share_parser (::KVZU::tShare_pskel&);

    void
    ShareText_parser (::KVZU::Simple1::s255_pskel&);

    void
    Desc_parser (::KVZU::Simple1::s255_pskel&);

    void
    Registration_parser (::KVZU::tRegistration_pskel&);

    void
    Documents_parser (::KVZU::Documents_pskel&);

    void
    parsers (::KVZU::Simple1::s255_pskel& /* Name */,
             ::KVZU::dRi1::dRights_pskel& /* Type */,
             ::KVZU::tOwners_pskel& /* Owners */,
             ::KVZU::tShare_pskel& /* Share */,
             ::KVZU::Simple1::s255_pskel& /* ShareText */,
             ::KVZU::Simple1::s255_pskel& /* Desc */,
             ::KVZU::tRegistration_pskel& /* Registration */,
             ::KVZU::Documents_pskel& /* Documents */);

    // Constructor.
    //
    tRight_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s255_pskel* Name_parser_;
    ::KVZU::dRi1::dRights_pskel* Type_parser_;
    ::KVZU::tOwners_pskel* Owners_parser_;
    ::KVZU::tShare_pskel* Share_parser_;
    ::KVZU::Simple1::s255_pskel* ShareText_parser_;
    ::KVZU::Simple1::s255_pskel* Desc_parser_;
    ::KVZU::tRegistration_pskel* Registration_parser_;
    ::KVZU::Documents_pskel* Documents_parser_;
  };

  class tEncumbranceZU_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    Type ();

    virtual void
    AccountNumber ();

    virtual void
    CadastralNumberRestriction ();

    virtual void
    OwnersRestrictionInFavorem ();

    virtual void
    Duration ();

    virtual void
    Registration ();

    virtual void
    Document ();

    virtual void
    post_tEncumbranceZU ();

    // Parser construction API.
    //
    void
    Name_parser (::KVZU::Simple1::s4000_pskel&);

    void
    Type_parser (::KVZU::dEn2::dEncumbrances_pskel&);

    void
    AccountNumber_parser (::KVZU::Simple1::s255_pskel&);

    void
    CadastralNumberRestriction_parser (::KVZU::Simple1::s40_pskel&);

    void
    OwnersRestrictionInFavorem_parser (::KVZU::tOwnerRestrictionInFavorem_pskel&);

    void
    Duration_parser (::KVZU::tDuration_pskel&);

    void
    Registration_parser (::KVZU::tRegistration_pskel&);

    void
    Document_parser (::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel&);

    void
    parsers (::KVZU::Simple1::s4000_pskel& /* Name */,
             ::KVZU::dEn2::dEncumbrances_pskel& /* Type */,
             ::KVZU::Simple1::s255_pskel& /* AccountNumber */,
             ::KVZU::Simple1::s40_pskel& /* CadastralNumberRestriction */,
             ::KVZU::tOwnerRestrictionInFavorem_pskel& /* OwnersRestrictionInFavorem */,
             ::KVZU::tDuration_pskel& /* Duration */,
             ::KVZU::tRegistration_pskel& /* Registration */,
             ::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel& /* Document */);

    // Constructor.
    //
    tEncumbranceZU_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s4000_pskel* Name_parser_;
    ::KVZU::dEn2::dEncumbrances_pskel* Type_parser_;
    ::KVZU::Simple1::s255_pskel* AccountNumber_parser_;
    ::KVZU::Simple1::s40_pskel* CadastralNumberRestriction_parser_;
    ::KVZU::tOwnerRestrictionInFavorem_pskel* OwnersRestrictionInFavorem_parser_;
    ::KVZU::tDuration_pskel* Duration_parser_;
    ::KVZU::tRegistration_pskel* Registration_parser_;
    ::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel* Document_parser_;
  };

  class tShare_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Numerator (long long);

    virtual void
    Denominator (long long);

    virtual void
    post_tShare ();

    // Parser construction API.
    //
    void
    Numerator_parser (::xml_schema::integer_pskel&);

    void
    Denominator_parser (::xml_schema::integer_pskel&);

    void
    parsers (::xml_schema::integer_pskel& /* Numerator */,
             ::xml_schema::integer_pskel& /* Denominator */);

    // Constructor.
    //
    tShare_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::integer_pskel* Numerator_parser_;
    ::xml_schema::integer_pskel* Denominator_parser_;
  };

  class tRegistration_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RegNumber ();

    virtual void
    RegDate (const ::xml_schema::date&);

    virtual void
    post_tRegistration ();

    // Parser construction API.
    //
    void
    RegNumber_parser (::KVZU::Simple1::s45_pskel&);

    void
    RegDate_parser (::xml_schema::date_pskel&);

    void
    parsers (::KVZU::Simple1::s45_pskel& /* RegNumber */,
             ::xml_schema::date_pskel& /* RegDate */);

    // Constructor.
    //
    tRegistration_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s45_pskel* RegNumber_parser_;
    ::xml_schema::date_pskel* RegDate_parser_;
  };

  class tDuration_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Started (const ::xml_schema::date&);

    virtual void
    Stopped (const ::xml_schema::date&);

    virtual void
    Term ();

    virtual void
    post_tDuration ();

    // Parser construction API.
    //
    void
    Started_parser (::xml_schema::date_pskel&);

    void
    Stopped_parser (::xml_schema::date_pskel&);

    void
    Term_parser (::KVZU::Simple1::s100_pskel&);

    void
    parsers (::xml_schema::date_pskel& /* Started */,
             ::xml_schema::date_pskel& /* Stopped */,
             ::KVZU::Simple1::s100_pskel& /* Term */);

    // Constructor.
    //
    tDuration_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::date_pskel* Started_parser_;
    ::xml_schema::date_pskel* Stopped_parser_;
    ::KVZU::Simple1::s100_pskel* Term_parser_;
  };

  class tOwners_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Owner ();

    virtual void
    post_tOwners ();

    // Parser construction API.
    //
    void
    Owner_parser (::KVZU::Owner_pskel&);

    void
    parsers (::KVZU::Owner_pskel& /* Owner */);

    // Constructor.
    //
    tOwners_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Owner_pskel* Owner_parser_;
  };

  class tOwner_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Person ();

    virtual void
    Organization ();

    virtual void
    Governance ();

    virtual void
    post_tOwner ();

    // Parser construction API.
    //
    void
    Person_parser (::KVZU::Person_pskel&);

    void
    Organization_parser (::KVZU::tNameOwner_pskel&);

    void
    Governance_parser (::KVZU::tNameOwner_pskel&);

    void
    parsers (::KVZU::Person_pskel& /* Person */,
             ::KVZU::tNameOwner_pskel& /* Organization */,
             ::KVZU::tNameOwner_pskel& /* Governance */);

    // Constructor.
    //
    tOwner_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Person_pskel* Person_parser_;
    ::KVZU::tNameOwner_pskel* Organization_parser_;
    ::KVZU::tNameOwner_pskel* Governance_parser_;
  };

  class tContactOwner_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Address ();

    virtual void
    Email ();

    virtual void
    post_tContactOwner ();

    // Parser construction API.
    //
    void
    Address_parser (::KVZU::Simple1::s4000_pskel&);

    void
    Email_parser (::KVZU::Simple1::s100_pskel&);

    void
    parsers (::KVZU::Simple1::s4000_pskel& /* Address */,
             ::KVZU::Simple1::s100_pskel& /* Email */);

    // Constructor.
    //
    tContactOwner_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s4000_pskel* Address_parser_;
    ::KVZU::Simple1::s100_pskel* Email_parser_;
  };

  class tOwnerRestrictionInFavorem_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    OwnerRestrictionInFavorem ();

    virtual void
    post_tOwnerRestrictionInFavorem ();

    // Parser construction API.
    //
    void
    OwnerRestrictionInFavorem_parser (::KVZU::tOwner_pskel&);

    void
    parsers (::KVZU::tOwner_pskel& /* OwnerRestrictionInFavorem */);

    // Constructor.
    //
    tOwnerRestrictionInFavorem_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tOwner_pskel* OwnerRestrictionInFavorem_parser_;
  };

  class tNameOwner_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    post_tNameOwner ();

    // Parser construction API.
    //
    void
    Name_parser (::KVZU::Simple1::s500_pskel&);

    void
    parsers (::KVZU::Simple1::s500_pskel& /* Name */);

    // Constructor.
    //
    tNameOwner_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s500_pskel* Name_parser_;
  };

  class tEngineerOut_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FamilyName ();

    virtual void
    FirstName ();

    virtual void
    Patronymic ();

    virtual void
    NCertificate ();

    virtual void
    Organization ();

    virtual void
    post_tEngineerOut ();

    // Parser construction API.
    //
    void
    FamilyName_parser (::KVZU::Simple1::s100_pskel&);

    void
    FirstName_parser (::KVZU::Simple1::s100_pskel&);

    void
    Patronymic_parser (::KVZU::Simple1::s100_pskel&);

    void
    NCertificate_parser (::KVZU::Simple1::s50_pskel&);

    void
    Organization_parser (::KVZU::tOrganizationNameOut_pskel&);

    void
    parsers (::KVZU::Simple1::s100_pskel& /* FamilyName */,
             ::KVZU::Simple1::s100_pskel& /* FirstName */,
             ::KVZU::Simple1::s100_pskel& /* Patronymic */,
             ::KVZU::Simple1::s50_pskel& /* NCertificate */,
             ::KVZU::tOrganizationNameOut_pskel& /* Organization */);

    // Constructor.
    //
    tEngineerOut_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s100_pskel* FamilyName_parser_;
    ::KVZU::Simple1::s100_pskel* FirstName_parser_;
    ::KVZU::Simple1::s100_pskel* Patronymic_parser_;
    ::KVZU::Simple1::s50_pskel* NCertificate_parser_;
    ::KVZU::tOrganizationNameOut_pskel* Organization_parser_;
  };

  class tOrganizationNameOut_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Name ();

    virtual void
    post_tOrganizationNameOut ();

    // Parser construction API.
    //
    void
    Name_parser (::KVZU::Simple1::s255_pskel&);

    void
    parsers (::KVZU::Simple1::s255_pskel& /* Name */);

    // Constructor.
    //
    tOrganizationNameOut_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s255_pskel* Name_parser_;
  };

  class KVZU_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Parcels ();

    virtual void
    CertificationDoc ();

    virtual void
    Contractors ();

    virtual void
    CoordSystems ();

    virtual void
    post_KVZU ();

    // Parser construction API.
    //
    void
    Parcels_parser (::KVZU::Parcels_pskel&);

    void
    CertificationDoc_parser (::KVZUCer1::tCertificationDoc_pskel&);

    void
    Contractors_parser (::KVZU::Contractors_pskel&);

    void
    CoordSystems_parser (::KVZU::Spa2::tCoordSystems_pskel&);

    void
    parsers (::KVZU::Parcels_pskel& /* Parcels */,
             ::KVZUCer1::tCertificationDoc_pskel& /* CertificationDoc */,
             ::KVZU::Contractors_pskel& /* Contractors */,
             ::KVZU::Spa2::tCoordSystems_pskel& /* CoordSystems */);

    // Constructor.
    //
    KVZU_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Parcels_pskel* Parcels_parser_;
    ::KVZUCer1::tCertificationDoc_pskel* CertificationDoc_parser_;
    ::KVZU::Contractors_pskel* Contractors_parser_;
    ::KVZU::Spa2::tCoordSystems_pskel* CoordSystems_parser_;
  };

  class Rights_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Right ();

    virtual void
    post_Rights ();

    // Parser construction API.
    //
    void
    Right_parser (::KVZU::tRight_pskel&);

    void
    parsers (::KVZU::tRight_pskel& /* Right */);

    // Constructor.
    //
    Rights_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tRight_pskel* Right_parser_;
  };

  class SubParcels_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    SubParcel ();

    virtual void
    post_SubParcels ();

    // Parser construction API.
    //
    void
    SubParcel_parser (::KVZU::tSubParcel_pskel&);

    void
    parsers (::KVZU::tSubParcel_pskel& /* SubParcel */);

    // Constructor.
    //
    SubParcels_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tSubParcel_pskel* SubParcel_parser_;
  };

  class Contours_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Contour ();

    virtual void
    post_Contours ();

    // Parser construction API.
    //
    void
    Contour_parser (::KVZU::tContour_pskel&);

    void
    parsers (::KVZU::tContour_pskel& /* Contour */);

    // Constructor.
    //
    Contours_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tContour_pskel* Contour_parser_;
  };

  class CompositionEZ_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    EntryParcel ();

    virtual void
    post_CompositionEZ ();

    // Parser construction API.
    //
    void
    EntryParcel_parser (::KVZU::tEntryParcel_pskel&);

    void
    parsers (::KVZU::tEntryParcel_pskel& /* EntryParcel */);

    // Constructor.
    //
    CompositionEZ_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tEntryParcel_pskel* EntryParcel_parser_;
  };

  class Encumbrances_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Encumbrance ();

    virtual void
    post_Encumbrances ();

    // Parser construction API.
    //
    void
    Encumbrance_parser (::KVZU::tEncumbranceZU_pskel&);

    void
    parsers (::KVZU::tEncumbranceZU_pskel& /* Encumbrance */);

    // Constructor.
    //
    Encumbrances_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tEncumbranceZU_pskel* Encumbrance_parser_;
  };

  class ParcelNeighbours_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ParcelNeighbour ();

    virtual void
    post_ParcelNeighbours ();

    // Parser construction API.
    //
    void
    ParcelNeighbour_parser (::KVZU::ParcelNeighbour_pskel&);

    void
    parsers (::KVZU::ParcelNeighbour_pskel& /* ParcelNeighbour */);

    // Constructor.
    //
    ParcelNeighbours_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::ParcelNeighbour_pskel* ParcelNeighbour_parser_;
  };

  class Documents_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Document ();

    virtual void
    post_Documents ();

    // Parser construction API.
    //
    void
    Document_parser (::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel&);

    void
    parsers (::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel& /* Document */);

    // Constructor.
    //
    Documents_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::DocOut3::tDocumentWithoutAppliedFile_pskel* Document_parser_;
  };

  class Owner_pskel: public virtual ::KVZU::tOwner_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ContactOwner ();

    virtual void
    post_Owner ();

    // Parser construction API.
    //
    void
    ContactOwner_parser (::KVZU::tContactOwner_pskel&);

    void
    parsers (::KVZU::Person_pskel& /* Person */,
             ::KVZU::tNameOwner_pskel& /* Organization */,
             ::KVZU::tNameOwner_pskel& /* Governance */,
             ::KVZU::tContactOwner_pskel& /* ContactOwner */);

    // Constructor.
    //
    Owner_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tContactOwner_pskel* ContactOwner_parser_;
  };

  class Person_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FamilyName ();

    virtual void
    FirstName ();

    virtual void
    Patronymic ();

    virtual void
    post_Person ();

    // Parser construction API.
    //
    void
    FamilyName_parser (::KVZU::Simple1::s100_pskel&);

    void
    FirstName_parser (::KVZU::Simple1::s100_pskel&);

    void
    Patronymic_parser (::KVZU::Simple1::s100_pskel&);

    void
    parsers (::KVZU::Simple1::s100_pskel& /* FamilyName */,
             ::KVZU::Simple1::s100_pskel& /* FirstName */,
             ::KVZU::Simple1::s100_pskel& /* Patronymic */);

    // Constructor.
    //
    Person_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s100_pskel* FamilyName_parser_;
    ::KVZU::Simple1::s100_pskel* FirstName_parser_;
    ::KVZU::Simple1::s100_pskel* Patronymic_parser_;
  };

  class Parcels_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Parcel ();

    virtual void
    OffspringParcel ();

    virtual void
    post_Parcels ();

    // Parser construction API.
    //
    void
    Parcel_parser (::KVZU::tParcel_pskel&);

    void
    OffspringParcel_parser (::KVZU::OffspringParcel_pskel&);

    void
    parsers (::KVZU::tParcel_pskel& /* Parcel */,
             ::KVZU::OffspringParcel_pskel& /* OffspringParcel */);

    // Constructor.
    //
    Parcels_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::tParcel_pskel* Parcel_parser_;
    ::KVZU::OffspringParcel_pskel* OffspringParcel_parser_;
  };

  class Contractors_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Contractor ();

    virtual void
    post_Contractors ();

    // Parser construction API.
    //
    void
    Contractor_parser (::KVZU::Contractor_pskel&);

    void
    parsers (::KVZU::Contractor_pskel& /* Contractor */);

    // Constructor.
    //
    Contractors_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Contractor_pskel* Contractor_parser_;
  };

  class ParcelNeighbour_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    OwnerNeighbour ();

    virtual void
    CadastralNumber ();

    virtual void
    post_ParcelNeighbour ();

    // Parser construction API.
    //
    void
    OwnerNeighbour_parser (::KVZU::OwnerNeighbour_pskel&);

    void
    CadastralNumber_parser (::KVZU::Simple1::s40_pskel&);

    void
    parsers (::KVZU::OwnerNeighbour_pskel& /* OwnerNeighbour */,
             ::KVZU::Simple1::s40_pskel& /* CadastralNumber */);

    // Constructor.
    //
    ParcelNeighbour_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::OwnerNeighbour_pskel* OwnerNeighbour_parser_;
    ::KVZU::Simple1::s40_pskel* CadastralNumber_parser_;
  };

  class OffspringParcel_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    EntitySpatial ();

    virtual void
    CadastralNumber ();

    virtual void
    post_OffspringParcel ();

    // Parser construction API.
    //
    void
    EntitySpatial_parser (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel&);

    void
    CadastralNumber_parser (::KVZU::Simple1::s40_pskel&);

    void
    parsers (::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel& /* EntitySpatial */,
             ::KVZU::Simple1::s40_pskel& /* CadastralNumber */);

    // Constructor.
    //
    OffspringParcel_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Spa2::tEntitySpatialBordersZUOut_pskel* EntitySpatial_parser_;
    ::KVZU::Simple1::s40_pskel* CadastralNumber_parser_;
  };

  class Contractor_pskel: public virtual ::KVZU::tEngineerOut_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Date (const ::xml_schema::date&);

    virtual void
    post_Contractor ();

    // Parser construction API.
    //
    void
    Date_parser (::xml_schema::date_pskel&);

    void
    parsers (::KVZU::Simple1::s100_pskel& /* FamilyName */,
             ::KVZU::Simple1::s100_pskel& /* FirstName */,
             ::KVZU::Simple1::s100_pskel& /* Patronymic */,
             ::KVZU::Simple1::s50_pskel& /* NCertificate */,
             ::KVZU::tOrganizationNameOut_pskel& /* Organization */,
             ::xml_schema::date_pskel& /* Date */);

    // Constructor.
    //
    Contractor_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::date_pskel* Date_parser_;
  };

  class OwnerNeighbour_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ContactAddress ();

    virtual void
    Email ();

    virtual void
    post_OwnerNeighbour ();

    // Parser construction API.
    //
    void
    ContactAddress_parser (::KVZU::Simple1::s4000_pskel&);

    void
    Email_parser (::KVZU::Simple1::s100_pskel&);

    void
    parsers (::KVZU::Simple1::s4000_pskel& /* ContactAddress */,
             ::KVZU::Simple1::s100_pskel& /* Email */);

    // Constructor.
    //
    OwnerNeighbour_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::KVZU::Simple1::s4000_pskel* ContactAddress_parser_;
    ::KVZU::Simple1::s100_pskel* Email_parser_;
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX__SCHEMES_KVZU_KVZU_V06_PSKEL_HXX
