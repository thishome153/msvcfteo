// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "smev-supplementary-commons-1.0.1-pskel.hxx"

namespace SMEV
{
  // AttachmentRefType_pskel
  //

  void AttachmentRefType_pskel::
  attachmentId_parser (::xml_schema::string_pskel& p)
  {
    this->attachmentId_parser_ = &p;
  }

  void AttachmentRefType_pskel::
  parsers (::xml_schema::string_pskel& attachmentId)
  {
    this->attachmentId_parser_ = &attachmentId;
  }

  AttachmentRefType_pskel::
  AttachmentRefType_pskel ()
  : attachmentId_parser_ (0)
  {
  }

  // PrimaryIdentityDocumentType_pskel
  //

  void PrimaryIdentityDocumentType_pskel::
  PassportRF_parser (::SMEV::PassportRFType_pskel& p)
  {
    this->PassportRF_parser_ = &p;
  }

  void PrimaryIdentityDocumentType_pskel::
  ForeignPassport_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->ForeignPassport_parser_ = &p;
  }

  void PrimaryIdentityDocumentType_pskel::
  ResidencePermitRF_parser (::SMEV::InternationalPassportRFType_pskel& p)
  {
    this->ResidencePermitRF_parser_ = &p;
  }

  void PrimaryIdentityDocumentType_pskel::
  parsers (::SMEV::PassportRFType_pskel& PassportRF,
           ::SMEV::NotRestrictedDocumentType_pskel& ForeignPassport,
           ::SMEV::InternationalPassportRFType_pskel& ResidencePermitRF)
  {
    this->PassportRF_parser_ = &PassportRF;
    this->ForeignPassport_parser_ = &ForeignPassport;
    this->ResidencePermitRF_parser_ = &ResidencePermitRF;
  }

  PrimaryIdentityDocumentType_pskel::
  PrimaryIdentityDocumentType_pskel ()
  : PassportRF_parser_ (0),
    ForeignPassport_parser_ (0),
    ResidencePermitRF_parser_ (0)
  {
  }

  // AnyIdentityDocumentType_pskel
  //

  void AnyIdentityDocumentType_pskel::
  PassportRF_parser (::SMEV::PassportRFType_pskel& p)
  {
    this->PassportRF_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  ForeignPassport_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->ForeignPassport_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  ResidencePermitRF_parser (::SMEV::InternationalPassportRFType_pskel& p)
  {
    this->ResidencePermitRF_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  InternationalPassportRF_parser (::SMEV::InternationalPassportRFType_pskel& p)
  {
    this->InternationalPassportRF_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  MilitaryPassport_parser (::SMEV::MilitaryPassportDocumentType_pskel& p)
  {
    this->MilitaryPassport_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  SailorPassport_parser (::SMEV::MilitaryPassportDocumentType_pskel& p)
  {
    this->SailorPassport_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  SovietPassport_parser (::SMEV::SovietPassportType_pskel& p)
  {
    this->SovietPassport_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  BirthCertificate_parser (::SMEV::SovietPassportType_pskel& p)
  {
    this->BirthCertificate_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  DrivingLicenseRF_parser (::SMEV::DrivingLicenseRFType_pskel& p)
  {
    this->DrivingLicenseRF_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  ReleaseCertificate_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->ReleaseCertificate_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  PassportLossCertificate_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->PassportLossCertificate_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  Form9Certificate_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->Form9Certificate_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  TemporaryIdentityCardRF_parser (::SMEV::NotRestrictedDocumentType_pskel& p)
  {
    this->TemporaryIdentityCardRF_parser_ = &p;
  }

  void AnyIdentityDocumentType_pskel::
  parsers (::SMEV::PassportRFType_pskel& PassportRF,
           ::SMEV::NotRestrictedDocumentType_pskel& ForeignPassport,
           ::SMEV::InternationalPassportRFType_pskel& ResidencePermitRF,
           ::SMEV::InternationalPassportRFType_pskel& InternationalPassportRF,
           ::SMEV::MilitaryPassportDocumentType_pskel& MilitaryPassport,
           ::SMEV::MilitaryPassportDocumentType_pskel& SailorPassport,
           ::SMEV::SovietPassportType_pskel& SovietPassport,
           ::SMEV::SovietPassportType_pskel& BirthCertificate,
           ::SMEV::DrivingLicenseRFType_pskel& DrivingLicenseRF,
           ::SMEV::NotRestrictedDocumentType_pskel& ReleaseCertificate,
           ::SMEV::NotRestrictedDocumentType_pskel& PassportLossCertificate,
           ::SMEV::NotRestrictedDocumentType_pskel& Form9Certificate,
           ::SMEV::NotRestrictedDocumentType_pskel& TemporaryIdentityCardRF)
  {
    this->PassportRF_parser_ = &PassportRF;
    this->ForeignPassport_parser_ = &ForeignPassport;
    this->ResidencePermitRF_parser_ = &ResidencePermitRF;
    this->InternationalPassportRF_parser_ = &InternationalPassportRF;
    this->MilitaryPassport_parser_ = &MilitaryPassport;
    this->SailorPassport_parser_ = &SailorPassport;
    this->SovietPassport_parser_ = &SovietPassport;
    this->BirthCertificate_parser_ = &BirthCertificate;
    this->DrivingLicenseRF_parser_ = &DrivingLicenseRF;
    this->ReleaseCertificate_parser_ = &ReleaseCertificate;
    this->PassportLossCertificate_parser_ = &PassportLossCertificate;
    this->Form9Certificate_parser_ = &Form9Certificate;
    this->TemporaryIdentityCardRF_parser_ = &TemporaryIdentityCardRF;
  }

  AnyIdentityDocumentType_pskel::
  AnyIdentityDocumentType_pskel ()
  : PassportRF_parser_ (0),
    ForeignPassport_parser_ (0),
    ResidencePermitRF_parser_ (0),
    InternationalPassportRF_parser_ (0),
    MilitaryPassport_parser_ (0),
    SailorPassport_parser_ (0),
    SovietPassport_parser_ (0),
    BirthCertificate_parser_ (0),
    DrivingLicenseRF_parser_ (0),
    ReleaseCertificate_parser_ (0),
    PassportLossCertificate_parser_ (0),
    Form9Certificate_parser_ (0),
    TemporaryIdentityCardRF_parser_ (0)
  {
  }

  // NotRestrictedDocumentType_pskel
  //

  void NotRestrictedDocumentType_pskel::
  Series_parser (::SMEV::string_20_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void NotRestrictedDocumentType_pskel::
  Number_parser (::SMEV::Number_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void NotRestrictedDocumentType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void NotRestrictedDocumentType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void NotRestrictedDocumentType_pskel::
  parsers (::SMEV::string_20_pskel& Series,
           ::SMEV::Number_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  NotRestrictedDocumentType_pskel::
  NotRestrictedDocumentType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }

  // PassportRFType_pskel
  //

  void PassportRFType_pskel::
  Series_parser (::SMEV::digits_4_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void PassportRFType_pskel::
  Number_parser (::SMEV::digits_6_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void PassportRFType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void PassportRFType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void PassportRFType_pskel::
  parsers (::SMEV::digits_4_pskel& Series,
           ::SMEV::digits_6_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  PassportRFType_pskel::
  PassportRFType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }

  // SovietPassportType_pskel
  //

  void SovietPassportType_pskel::
  Series_parser (::SMEV::SovietStyleDocumentSeriesType_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void SovietPassportType_pskel::
  Number_parser (::SMEV::digits_6_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void SovietPassportType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void SovietPassportType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void SovietPassportType_pskel::
  parsers (::SMEV::SovietStyleDocumentSeriesType_pskel& Series,
           ::SMEV::digits_6_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  SovietPassportType_pskel::
  SovietPassportType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }

  // InternationalPassportRFType_pskel
  //

  void InternationalPassportRFType_pskel::
  Series_parser (::SMEV::digits_2_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void InternationalPassportRFType_pskel::
  Number_parser (::SMEV::digits_7_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void InternationalPassportRFType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void InternationalPassportRFType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void InternationalPassportRFType_pskel::
  parsers (::SMEV::digits_2_pskel& Series,
           ::SMEV::digits_7_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  InternationalPassportRFType_pskel::
  InternationalPassportRFType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }

  // MilitaryPassportDocumentType_pskel
  //

  void MilitaryPassportDocumentType_pskel::
  Series_parser (::SMEV::Series_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void MilitaryPassportDocumentType_pskel::
  Number_parser (::SMEV::digits_7_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void MilitaryPassportDocumentType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void MilitaryPassportDocumentType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void MilitaryPassportDocumentType_pskel::
  parsers (::SMEV::Series_pskel& Series,
           ::SMEV::digits_7_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  MilitaryPassportDocumentType_pskel::
  MilitaryPassportDocumentType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }

  // DrivingLicenseRFType_pskel
  //

  void DrivingLicenseRFType_pskel::
  Series_parser (::SMEV::Series1_pskel& p)
  {
    this->Series_parser_ = &p;
  }

  void DrivingLicenseRFType_pskel::
  Number_parser (::SMEV::digits_6_pskel& p)
  {
    this->Number_parser_ = &p;
  }

  void DrivingLicenseRFType_pskel::
  IssueDate_parser (::xml_schema::date_pskel& p)
  {
    this->IssueDate_parser_ = &p;
  }

  void DrivingLicenseRFType_pskel::
  Issuer_parser (::SMEV::rus_and_num_200_pskel& p)
  {
    this->Issuer_parser_ = &p;
  }

  void DrivingLicenseRFType_pskel::
  parsers (::SMEV::Series1_pskel& Series,
           ::SMEV::digits_6_pskel& Number,
           ::xml_schema::date_pskel& IssueDate,
           ::SMEV::rus_and_num_200_pskel& Issuer)
  {
    this->Series_parser_ = &Series;
    this->Number_parser_ = &Number;
    this->IssueDate_parser_ = &IssueDate;
    this->Issuer_parser_ = &Issuer;
  }

  DrivingLicenseRFType_pskel::
  DrivingLicenseRFType_pskel ()
  : Series_parser_ (0),
    Number_parser_ (0),
    IssueDate_parser_ (0),
    Issuer_parser_ (0)
  {
  }
}

namespace SMEV
{
  // AttachmentRefType_pskel
  //

  void AttachmentRefType_pskel::
  attachmentId (const ::std::string&)
  {
  }

  void AttachmentRefType_pskel::
  post_AttachmentRefType ()
  {
  }

  bool AttachmentRefType_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "attachmentId" && ns.empty ())
    {
      if (this->attachmentId_parser_)
      {
        this->attachmentId_parser_->pre ();
        this->attachmentId_parser_->_pre_impl ();
        this->attachmentId_parser_->_characters (v);
        this->attachmentId_parser_->_post_impl ();
        this->attachmentId (this->attachmentId_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // PrimaryIdentityDocumentType_pskel
  //

  void PrimaryIdentityDocumentType_pskel::
  PassportRF ()
  {
  }

  void PrimaryIdentityDocumentType_pskel::
  ForeignPassport ()
  {
  }

  void PrimaryIdentityDocumentType_pskel::
  ResidencePermitRF ()
  {
  }

  void PrimaryIdentityDocumentType_pskel::
  post_PrimaryIdentityDocumentType ()
  {
  }

  bool PrimaryIdentityDocumentType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "PassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PassportRF_parser_;

      if (this->PassportRF_parser_)
        this->PassportRF_parser_->pre ();

      return true;
    }

    if (n == "ForeignPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ForeignPassport_parser_;

      if (this->ForeignPassport_parser_)
        this->ForeignPassport_parser_->pre ();

      return true;
    }

    if (n == "ResidencePermitRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ResidencePermitRF_parser_;

      if (this->ResidencePermitRF_parser_)
        this->ResidencePermitRF_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PrimaryIdentityDocumentType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "PassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->PassportRF_parser_)
      {
        this->PassportRF_parser_->post_PassportRFType ();
        this->PassportRF ();
      }

      return true;
    }

    if (n == "ForeignPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->ForeignPassport_parser_)
      {
        this->ForeignPassport_parser_->post_NotRestrictedDocumentType ();
        this->ForeignPassport ();
      }

      return true;
    }

    if (n == "ResidencePermitRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->ResidencePermitRF_parser_)
      {
        this->ResidencePermitRF_parser_->post_InternationalPassportRFType ();
        this->ResidencePermitRF ();
      }

      return true;
    }

    return false;
  }

  // AnyIdentityDocumentType_pskel
  //

  void AnyIdentityDocumentType_pskel::
  PassportRF ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  ForeignPassport ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  ResidencePermitRF ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  InternationalPassportRF ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  MilitaryPassport ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  SailorPassport ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  SovietPassport ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  BirthCertificate ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  DrivingLicenseRF ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  ReleaseCertificate ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  PassportLossCertificate ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  Form9Certificate ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  TemporaryIdentityCardRF ()
  {
  }

  void AnyIdentityDocumentType_pskel::
  post_AnyIdentityDocumentType ()
  {
  }

  bool AnyIdentityDocumentType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "PassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PassportRF_parser_;

      if (this->PassportRF_parser_)
        this->PassportRF_parser_->pre ();

      return true;
    }

    if (n == "ForeignPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ForeignPassport_parser_;

      if (this->ForeignPassport_parser_)
        this->ForeignPassport_parser_->pre ();

      return true;
    }

    if (n == "ResidencePermitRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ResidencePermitRF_parser_;

      if (this->ResidencePermitRF_parser_)
        this->ResidencePermitRF_parser_->pre ();

      return true;
    }

    if (n == "InternationalPassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->InternationalPassportRF_parser_;

      if (this->InternationalPassportRF_parser_)
        this->InternationalPassportRF_parser_->pre ();

      return true;
    }

    if (n == "MilitaryPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->MilitaryPassport_parser_;

      if (this->MilitaryPassport_parser_)
        this->MilitaryPassport_parser_->pre ();

      return true;
    }

    if (n == "SailorPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SailorPassport_parser_;

      if (this->SailorPassport_parser_)
        this->SailorPassport_parser_->pre ();

      return true;
    }

    if (n == "SovietPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->SovietPassport_parser_;

      if (this->SovietPassport_parser_)
        this->SovietPassport_parser_->pre ();

      return true;
    }

    if (n == "BirthCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->BirthCertificate_parser_;

      if (this->BirthCertificate_parser_)
        this->BirthCertificate_parser_->pre ();

      return true;
    }

    if (n == "DrivingLicenseRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->DrivingLicenseRF_parser_;

      if (this->DrivingLicenseRF_parser_)
        this->DrivingLicenseRF_parser_->pre ();

      return true;
    }

    if (n == "ReleaseCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->ReleaseCertificate_parser_;

      if (this->ReleaseCertificate_parser_)
        this->ReleaseCertificate_parser_->pre ();

      return true;
    }

    if (n == "PassportLossCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->PassportLossCertificate_parser_;

      if (this->PassportLossCertificate_parser_)
        this->PassportLossCertificate_parser_->pre ();

      return true;
    }

    if (n == "Form9Certificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Form9Certificate_parser_;

      if (this->Form9Certificate_parser_)
        this->Form9Certificate_parser_->pre ();

      return true;
    }

    if (n == "TemporaryIdentityCardRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->TemporaryIdentityCardRF_parser_;

      if (this->TemporaryIdentityCardRF_parser_)
        this->TemporaryIdentityCardRF_parser_->pre ();

      return true;
    }

    return false;
  }

  bool AnyIdentityDocumentType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "PassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->PassportRF_parser_)
      {
        this->PassportRF_parser_->post_PassportRFType ();
        this->PassportRF ();
      }

      return true;
    }

    if (n == "ForeignPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->ForeignPassport_parser_)
      {
        this->ForeignPassport_parser_->post_NotRestrictedDocumentType ();
        this->ForeignPassport ();
      }

      return true;
    }

    if (n == "ResidencePermitRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->ResidencePermitRF_parser_)
      {
        this->ResidencePermitRF_parser_->post_InternationalPassportRFType ();
        this->ResidencePermitRF ();
      }

      return true;
    }

    if (n == "InternationalPassportRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->InternationalPassportRF_parser_)
      {
        this->InternationalPassportRF_parser_->post_InternationalPassportRFType ();
        this->InternationalPassportRF ();
      }

      return true;
    }

    if (n == "MilitaryPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->MilitaryPassport_parser_)
      {
        this->MilitaryPassport_parser_->post_MilitaryPassportDocumentType ();
        this->MilitaryPassport ();
      }

      return true;
    }

    if (n == "SailorPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->SailorPassport_parser_)
      {
        this->SailorPassport_parser_->post_MilitaryPassportDocumentType ();
        this->SailorPassport ();
      }

      return true;
    }

    if (n == "SovietPassport" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->SovietPassport_parser_)
      {
        this->SovietPassport_parser_->post_SovietPassportType ();
        this->SovietPassport ();
      }

      return true;
    }

    if (n == "BirthCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->BirthCertificate_parser_)
      {
        this->BirthCertificate_parser_->post_SovietPassportType ();
        this->BirthCertificate ();
      }

      return true;
    }

    if (n == "DrivingLicenseRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->DrivingLicenseRF_parser_)
      {
        this->DrivingLicenseRF_parser_->post_DrivingLicenseRFType ();
        this->DrivingLicenseRF ();
      }

      return true;
    }

    if (n == "ReleaseCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->ReleaseCertificate_parser_)
      {
        this->ReleaseCertificate_parser_->post_NotRestrictedDocumentType ();
        this->ReleaseCertificate ();
      }

      return true;
    }

    if (n == "PassportLossCertificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->PassportLossCertificate_parser_)
      {
        this->PassportLossCertificate_parser_->post_NotRestrictedDocumentType ();
        this->PassportLossCertificate ();
      }

      return true;
    }

    if (n == "Form9Certificate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Form9Certificate_parser_)
      {
        this->Form9Certificate_parser_->post_NotRestrictedDocumentType ();
        this->Form9Certificate ();
      }

      return true;
    }

    if (n == "TemporaryIdentityCardRF" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->TemporaryIdentityCardRF_parser_)
      {
        this->TemporaryIdentityCardRF_parser_->post_NotRestrictedDocumentType ();
        this->TemporaryIdentityCardRF ();
      }

      return true;
    }

    return false;
  }

  // NotRestrictedDocumentType_pskel
  //

  void NotRestrictedDocumentType_pskel::
  Series ()
  {
  }

  void NotRestrictedDocumentType_pskel::
  Number ()
  {
  }

  void NotRestrictedDocumentType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void NotRestrictedDocumentType_pskel::
  Issuer ()
  {
  }

  void NotRestrictedDocumentType_pskel::
  post_NotRestrictedDocumentType ()
  {
  }

  bool NotRestrictedDocumentType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool NotRestrictedDocumentType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_string_20 ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_Number ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // PassportRFType_pskel
  //

  void PassportRFType_pskel::
  Series ()
  {
  }

  void PassportRFType_pskel::
  Number ()
  {
  }

  void PassportRFType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void PassportRFType_pskel::
  Issuer ()
  {
  }

  void PassportRFType_pskel::
  post_PassportRFType ()
  {
  }

  bool PassportRFType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool PassportRFType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_digits_4 ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_digits_6 ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // SovietPassportType_pskel
  //

  void SovietPassportType_pskel::
  Series ()
  {
  }

  void SovietPassportType_pskel::
  Number ()
  {
  }

  void SovietPassportType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void SovietPassportType_pskel::
  Issuer ()
  {
  }

  void SovietPassportType_pskel::
  post_SovietPassportType ()
  {
  }

  bool SovietPassportType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool SovietPassportType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_SovietStyleDocumentSeriesType ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_digits_6 ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // InternationalPassportRFType_pskel
  //

  void InternationalPassportRFType_pskel::
  Series ()
  {
  }

  void InternationalPassportRFType_pskel::
  Number ()
  {
  }

  void InternationalPassportRFType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void InternationalPassportRFType_pskel::
  Issuer ()
  {
  }

  void InternationalPassportRFType_pskel::
  post_InternationalPassportRFType ()
  {
  }

  bool InternationalPassportRFType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool InternationalPassportRFType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_digits_2 ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_digits_7 ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // MilitaryPassportDocumentType_pskel
  //

  void MilitaryPassportDocumentType_pskel::
  Series ()
  {
  }

  void MilitaryPassportDocumentType_pskel::
  Number ()
  {
  }

  void MilitaryPassportDocumentType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void MilitaryPassportDocumentType_pskel::
  Issuer ()
  {
  }

  void MilitaryPassportDocumentType_pskel::
  post_MilitaryPassportDocumentType ()
  {
  }

  bool MilitaryPassportDocumentType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool MilitaryPassportDocumentType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_Series ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_digits_7 ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // DrivingLicenseRFType_pskel
  //

  void DrivingLicenseRFType_pskel::
  Series ()
  {
  }

  void DrivingLicenseRFType_pskel::
  Number ()
  {
  }

  void DrivingLicenseRFType_pskel::
  IssueDate (const ::xml_schema::date&)
  {
  }

  void DrivingLicenseRFType_pskel::
  Issuer ()
  {
  }

  void DrivingLicenseRFType_pskel::
  post_DrivingLicenseRFType ()
  {
  }

  bool DrivingLicenseRFType_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Series_parser_;

      if (this->Series_parser_)
        this->Series_parser_->pre ();

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Number_parser_;

      if (this->Number_parser_)
        this->Number_parser_->pre ();

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->IssueDate_parser_;

      if (this->IssueDate_parser_)
        this->IssueDate_parser_->pre ();

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->Issuer_parser_;

      if (this->Issuer_parser_)
        this->Issuer_parser_->pre ();

      return true;
    }

    return false;
  }

  bool DrivingLicenseRFType_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "Series" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Series_parser_)
      {
        this->Series_parser_->post_Series1 ();
        this->Series ();
      }

      return true;
    }

    if (n == "Number" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Number_parser_)
      {
        this->Number_parser_->post_digits_6 ();
        this->Number ();
      }

      return true;
    }

    if (n == "IssueDate" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->IssueDate_parser_)
        this->IssueDate (this->IssueDate_parser_->post_date ());

      return true;
    }

    if (n == "Issuer" && ns == "urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1")
    {
      if (this->Issuer_parser_)
      {
        this->Issuer_parser_->post_rus_and_num_200 ();
        this->Issuer ();
      }

      return true;
    }

    return false;
  }

  // RFC2046MimeTypesType_pskel
  //

  void RFC2046MimeTypesType_pskel::
  post_RFC2046MimeTypesType ()
  {
  }

  // PostalCodeRFType_pskel
  //

  void PostalCodeRFType_pskel::
  post_PostalCodeRFType ()
  {
  }

  // PhoneNumberRFType_pskel
  //

  void PhoneNumberRFType_pskel::
  post_PhoneNumberRFType ()
  {
  }

  // EmailAddressType_pskel
  //

  void EmailAddressType_pskel::
  post_EmailAddressType ()
  {
  }

  // LegalPersonINNType_pskel
  //

  void LegalPersonINNType_pskel::
  post_LegalPersonINNType ()
  {
  }

  // PhysicalPersonINNType_pskel
  //

  void PhysicalPersonINNType_pskel::
  post_PhysicalPersonINNType ()
  {
  }

  // SNILSType_pskel
  //

  void SNILSType_pskel::
  post_SNILSType ()
  {
  }

  // KPPType_pskel
  //

  void KPPType_pskel::
  post_KPPType ()
  {
  }

  // OGRNCompanyType_pskel
  //

  void OGRNCompanyType_pskel::
  post_OGRNCompanyType ()
  {
  }

  // OGRNSoleProprietorType_pskel
  //

  void OGRNSoleProprietorType_pskel::
  post_OGRNSoleProprietorType ()
  {
  }

  // CadastralNumberType_pskel
  //

  void CadastralNumberType_pskel::
  post_CadastralNumberType ()
  {
  }

  // OKATOType_pskel
  //

  void OKATOType_pskel::
  post_OKATOType ()
  {
  }

  // GenderType_pskel
  //

  void GenderType_pskel::
  post_GenderType ()
  {
  }

  // SovietStyleDocumentSeriesType_pskel
  //

  void SovietStyleDocumentSeriesType_pskel::
  post_SovietStyleDocumentSeriesType ()
  {
  }

  // digits_7_pskel
  //

  void digits_7_pskel::
  post_digits_7 ()
  {
  }

  // digits_6_pskel
  //

  void digits_6_pskel::
  post_digits_6 ()
  {
  }

  // digits_4_pskel
  //

  void digits_4_pskel::
  post_digits_4 ()
  {
  }

  // digits_2_pskel
  //

  void digits_2_pskel::
  post_digits_2 ()
  {
  }

  // rus_and_num_pskel
  //

  void rus_and_num_pskel::
  post_rus_and_num ()
  {
  }

  // rus_and_num_500_pskel
  //

  void rus_and_num_500_pskel::
  post_rus_and_num_500 ()
  {
    post_rus_and_num ();
  }

  // rus_and_num_200_pskel
  //

  void rus_and_num_200_pskel::
  post_rus_and_num_200 ()
  {
    post_rus_and_num ();
  }

  // rus_and_num_100_pskel
  //

  void rus_and_num_100_pskel::
  post_rus_and_num_100 ()
  {
    post_rus_and_num ();
  }

  // rus_and_num_50_pskel
  //

  void rus_and_num_50_pskel::
  post_rus_and_num_50 ()
  {
    post_rus_and_num ();
  }

  // rus_pskel
  //

  void rus_pskel::
  post_rus ()
  {
  }

  // rus_500_pskel
  //

  void rus_500_pskel::
  post_rus_500 ()
  {
    post_rus ();
  }

  // rus_200_pskel
  //

  void rus_200_pskel::
  post_rus_200 ()
  {
    post_rus ();
  }

  // rus_100_pskel
  //

  void rus_100_pskel::
  post_rus_100 ()
  {
    post_rus ();
  }

  // rus_50_pskel
  //

  void rus_50_pskel::
  post_rus_50 ()
  {
    post_rus ();
  }

  // string_500_pskel
  //

  void string_500_pskel::
  post_string_500 ()
  {
  }

  // string_200_pskel
  //

  void string_200_pskel::
  post_string_200 ()
  {
  }

  // string_100_pskel
  //

  void string_100_pskel::
  post_string_100 ()
  {
  }

  // string_50_pskel
  //

  void string_50_pskel::
  post_string_50 ()
  {
  }

  // string_20_pskel
  //

  void string_20_pskel::
  post_string_20 ()
  {
  }

  // string_10_pskel
  //

  void string_10_pskel::
  post_string_10 ()
  {
  }

  // Number_pskel
  //

  void Number_pskel::
  post_Number ()
  {
  }

  // Series_pskel
  //

  void Series_pskel::
  post_Series ()
  {
  }

  // Series1_pskel
  //

  void Series1_pskel::
  post_Series1 ()
  {
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

