#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class AttachmentRefDataTable;
    public : ref class PrimaryIdentityDocumentDataTable;
    public : ref class PassportRFDataTable;
    public : ref class ForeignPassportDataTable;
    public : ref class ResidencePermitRFDataTable;
    public : ref class IdentityDocumentDataTable;
    public : ref class InternationalPassportRFDataTable;
    public : ref class MilitaryPassportDataTable;
    public : ref class SailorPassportDataTable;
    public : ref class SovietPassportDataTable;
    public : ref class BirthCertificateDataTable;
    public : ref class DrivingLicenseRFDataTable;
    public : ref class ReleaseCertificateDataTable;
    public : ref class PassportLossCertificateDataTable;
    public : ref class Form9CertificateDataTable;
    public : ref class TemporaryIdentityCardRFDataTable;
    public : ref class AttachmentRefRow;
    public : ref class PrimaryIdentityDocumentRow;
    public : ref class PassportRFRow;
    public : ref class ForeignPassportRow;
    public : ref class ResidencePermitRFRow;
    public : ref class IdentityDocumentRow;
    public : ref class InternationalPassportRFRow;
    public : ref class MilitaryPassportRow;
    public : ref class SailorPassportRow;
    public : ref class SovietPassportRow;
    public : ref class BirthCertificateRow;
    public : ref class DrivingLicenseRFRow;
    public : ref class ReleaseCertificateRow;
    public : ref class PassportLossCertificateRow;
    public : ref class Form9CertificateRow;
    public : ref class TemporaryIdentityCardRFRow;
    public : ref class AttachmentRefRowChangeEvent;
    public : ref class PrimaryIdentityDocumentRowChangeEvent;
    public : ref class PassportRFRowChangeEvent;
    public : ref class ForeignPassportRowChangeEvent;
    public : ref class ResidencePermitRFRowChangeEvent;
    public : ref class IdentityDocumentRowChangeEvent;
    public : ref class InternationalPassportRFRowChangeEvent;
    public : ref class MilitaryPassportRowChangeEvent;
    public : ref class SailorPassportRowChangeEvent;
    public : ref class SovietPassportRowChangeEvent;
    public : ref class BirthCertificateRowChangeEvent;
    public : ref class DrivingLicenseRFRowChangeEvent;
    public : ref class ReleaseCertificateRowChangeEvent;
    public : ref class PassportLossCertificateRowChangeEvent;
    public : ref class Form9CertificateRowChangeEvent;
    public : ref class TemporaryIdentityCardRFRowChangeEvent;
    
    private: NewDataSet::AttachmentRefDataTable^  tableAttachmentRef;
    
    private: NewDataSet::PrimaryIdentityDocumentDataTable^  tablePrimaryIdentityDocument;
    
    private: NewDataSet::PassportRFDataTable^  tablePassportRF;
    
    private: NewDataSet::ForeignPassportDataTable^  tableForeignPassport;
    
    private: NewDataSet::ResidencePermitRFDataTable^  tableResidencePermitRF;
    
    private: NewDataSet::IdentityDocumentDataTable^  tableIdentityDocument;
    
    private: NewDataSet::InternationalPassportRFDataTable^  tableInternationalPassportRF;
    
    private: NewDataSet::MilitaryPassportDataTable^  tableMilitaryPassport;
    
    private: NewDataSet::SailorPassportDataTable^  tableSailorPassport;
    
    private: NewDataSet::SovietPassportDataTable^  tableSovietPassport;
    
    private: NewDataSet::BirthCertificateDataTable^  tableBirthCertificate;
    
    private: NewDataSet::DrivingLicenseRFDataTable^  tableDrivingLicenseRF;
    
    private: NewDataSet::ReleaseCertificateDataTable^  tableReleaseCertificate;
    
    private: NewDataSet::PassportLossCertificateDataTable^  tablePassportLossCertificate;
    
    private: NewDataSet::Form9CertificateDataTable^  tableForm9Certificate;
    
    private: NewDataSet::TemporaryIdentityCardRFDataTable^  tableTemporaryIdentityCardRF;
    
    private: ::System::Data::DataRelation^  relationPrimaryIdentityDocument_PassportRF;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_PassportRF;
    
    private: ::System::Data::DataRelation^  relationPrimaryIdentityDocument_ForeignPassport;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_ForeignPassport;
    
    private: ::System::Data::DataRelation^  relationPrimaryIdentityDocument_ResidencePermitRF;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_ResidencePermitRF;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_InternationalPassportRF;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_MilitaryPassport;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_SailorPassport;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_SovietPassport;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_BirthCertificate;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_DrivingLicenseRF;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_ReleaseCertificate;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_PassportLossCertificate;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_Form9Certificate;
    
    private: ::System::Data::DataRelation^  relationIdentityDocument_TemporaryIdentityCardRF;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : delegate System::Void AttachmentRefRowChangeEventHandler(::System::Object^  sender, NewDataSet::AttachmentRefRowChangeEvent^  e);
    
    public : delegate System::Void PrimaryIdentityDocumentRowChangeEventHandler(::System::Object^  sender, NewDataSet::PrimaryIdentityDocumentRowChangeEvent^  e);
    
    public : delegate System::Void PassportRFRowChangeEventHandler(::System::Object^  sender, NewDataSet::PassportRFRowChangeEvent^  e);
    
    public : delegate System::Void ForeignPassportRowChangeEventHandler(::System::Object^  sender, NewDataSet::ForeignPassportRowChangeEvent^  e);
    
    public : delegate System::Void ResidencePermitRFRowChangeEventHandler(::System::Object^  sender, NewDataSet::ResidencePermitRFRowChangeEvent^  e);
    
    public : delegate System::Void IdentityDocumentRowChangeEventHandler(::System::Object^  sender, NewDataSet::IdentityDocumentRowChangeEvent^  e);
    
    public : delegate System::Void InternationalPassportRFRowChangeEventHandler(::System::Object^  sender, NewDataSet::InternationalPassportRFRowChangeEvent^  e);
    
    public : delegate System::Void MilitaryPassportRowChangeEventHandler(::System::Object^  sender, NewDataSet::MilitaryPassportRowChangeEvent^  e);
    
    public : delegate System::Void SailorPassportRowChangeEventHandler(::System::Object^  sender, NewDataSet::SailorPassportRowChangeEvent^  e);
    
    public : delegate System::Void SovietPassportRowChangeEventHandler(::System::Object^  sender, NewDataSet::SovietPassportRowChangeEvent^  e);
    
    public : delegate System::Void BirthCertificateRowChangeEventHandler(::System::Object^  sender, NewDataSet::BirthCertificateRowChangeEvent^  e);
    
    public : delegate System::Void DrivingLicenseRFRowChangeEventHandler(::System::Object^  sender, NewDataSet::DrivingLicenseRFRowChangeEvent^  e);
    
    public : delegate System::Void ReleaseCertificateRowChangeEventHandler(::System::Object^  sender, NewDataSet::ReleaseCertificateRowChangeEvent^  e);
    
    public : delegate System::Void PassportLossCertificateRowChangeEventHandler(::System::Object^  sender, NewDataSet::PassportLossCertificateRowChangeEvent^  e);
    
    public : delegate System::Void Form9CertificateRowChangeEventHandler(::System::Object^  sender, NewDataSet::Form9CertificateRowChangeEvent^  e);
    
    public : delegate System::Void TemporaryIdentityCardRFRowChangeEventHandler(::System::Object^  sender, NewDataSet::TemporaryIdentityCardRFRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::AttachmentRefDataTable^  AttachmentRef {
        NewDataSet::AttachmentRefDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PrimaryIdentityDocumentDataTable^  PrimaryIdentityDocument {
        NewDataSet::PrimaryIdentityDocumentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PassportRFDataTable^  PassportRF {
        NewDataSet::PassportRFDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::ForeignPassportDataTable^  ForeignPassport {
        NewDataSet::ForeignPassportDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::ResidencePermitRFDataTable^  ResidencePermitRF {
        NewDataSet::ResidencePermitRFDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::IdentityDocumentDataTable^  IdentityDocument {
        NewDataSet::IdentityDocumentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::InternationalPassportRFDataTable^  InternationalPassportRF {
        NewDataSet::InternationalPassportRFDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::MilitaryPassportDataTable^  MilitaryPassport {
        NewDataSet::MilitaryPassportDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::SailorPassportDataTable^  SailorPassport {
        NewDataSet::SailorPassportDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::SovietPassportDataTable^  SovietPassport {
        NewDataSet::SovietPassportDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::BirthCertificateDataTable^  BirthCertificate {
        NewDataSet::BirthCertificateDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::DrivingLicenseRFDataTable^  DrivingLicenseRF {
        NewDataSet::DrivingLicenseRFDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::ReleaseCertificateDataTable^  ReleaseCertificate {
        NewDataSet::ReleaseCertificateDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PassportLossCertificateDataTable^  PassportLossCertificate {
        NewDataSet::PassportLossCertificateDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::Form9CertificateDataTable^  Form9Certificate {
        NewDataSet::Form9CertificateDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::TemporaryIdentityCardRFDataTable^  TemporaryIdentityCardRF {
        NewDataSet::TemporaryIdentityCardRFDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeAttachmentRef();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializePrimaryIdentityDocument();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializePassportRF();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeForeignPassport();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeResidencePermitRF();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeIdentityDocument();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeInternationalPassportRF();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeMilitaryPassport();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeSailorPassport();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeSovietPassport();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeBirthCertificate();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeDrivingLicenseRF();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeReleaseCertificate();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializePassportLossCertificate();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeForm9Certificate();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Boolean ShouldSerializeTemporaryIdentityCardRF();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class AttachmentRefDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnattachmentId;
        
        public: event NewDataSet::AttachmentRefRowChangeEventHandler^  AttachmentRefRowChanging;
        
        public: event NewDataSet::AttachmentRefRowChangeEventHandler^  AttachmentRefRowChanged;
        
        public: event NewDataSet::AttachmentRefRowChangeEventHandler^  AttachmentRefRowDeleting;
        
        public: event NewDataSet::AttachmentRefRowChangeEventHandler^  AttachmentRefRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AttachmentRefDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AttachmentRefDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AttachmentRefDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  attachmentIdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::AttachmentRefRow^  default [::System::Int32 ] {
            NewDataSet::AttachmentRefRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddAttachmentRefRow(NewDataSet::AttachmentRefRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::AttachmentRefRow^  AddAttachmentRefRow(System::String^  attachmentId);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::AttachmentRefRow^  NewAttachmentRefRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveAttachmentRefRow(NewDataSet::AttachmentRefRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PrimaryIdentityDocumentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnPrimaryIdentityDocument_Id;
        
        public: event NewDataSet::PrimaryIdentityDocumentRowChangeEventHandler^  PrimaryIdentityDocumentRowChanging;
        
        public: event NewDataSet::PrimaryIdentityDocumentRowChangeEventHandler^  PrimaryIdentityDocumentRowChanged;
        
        public: event NewDataSet::PrimaryIdentityDocumentRowChangeEventHandler^  PrimaryIdentityDocumentRowDeleting;
        
        public: event NewDataSet::PrimaryIdentityDocumentRowChangeEventHandler^  PrimaryIdentityDocumentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PrimaryIdentityDocumentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PrimaryIdentityDocumentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PrimaryIdentityDocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  PrimaryIdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PrimaryIdentityDocumentRow^  default [::System::Int32 ] {
            NewDataSet::PrimaryIdentityDocumentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddPrimaryIdentityDocumentRow(NewDataSet::PrimaryIdentityDocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PrimaryIdentityDocumentRow^  AddPrimaryIdentityDocumentRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PrimaryIdentityDocumentRow^  NewPrimaryIdentityDocumentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemovePrimaryIdentityDocumentRow(NewDataSet::PrimaryIdentityDocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PassportRFDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnPrimaryIdentityDocument_Id;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::PassportRFRowChangeEventHandler^  PassportRFRowChanging;
        
        public: event NewDataSet::PassportRFRowChangeEventHandler^  PassportRFRowChanged;
        
        public: event NewDataSet::PassportRFRowChangeEventHandler^  PassportRFRowDeleting;
        
        public: event NewDataSet::PassportRFRowChangeEventHandler^  PassportRFRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportRFDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportRFDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  PrimaryIdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PassportRFRow^  default [::System::Int32 ] {
            NewDataSet::PassportRFRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddPassportRFRow(NewDataSet::PassportRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PassportRFRow^  AddPassportRFRow(
                    System::String^  Series, 
                    System::String^  Number, 
                    System::DateTime IssueDate, 
                    System::String^  Issuer, 
                    NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_PassportRF, 
                    NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_PassportRF);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PassportRFRow^  NewPassportRFRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemovePassportRFRow(NewDataSet::PassportRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ForeignPassportDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnPrimaryIdentityDocument_Id;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::ForeignPassportRowChangeEventHandler^  ForeignPassportRowChanging;
        
        public: event NewDataSet::ForeignPassportRowChangeEventHandler^  ForeignPassportRowChanged;
        
        public: event NewDataSet::ForeignPassportRowChangeEventHandler^  ForeignPassportRowDeleting;
        
        public: event NewDataSet::ForeignPassportRowChangeEventHandler^  ForeignPassportRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ForeignPassportDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ForeignPassportDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ForeignPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  PrimaryIdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ForeignPassportRow^  default [::System::Int32 ] {
            NewDataSet::ForeignPassportRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddForeignPassportRow(NewDataSet::ForeignPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ForeignPassportRow^  AddForeignPassportRow(
                    System::String^  Series, 
                    System::String^  Number, 
                    System::DateTime IssueDate, 
                    System::String^  Issuer, 
                    NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ForeignPassport, 
                    NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ForeignPassport);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ForeignPassportRow^  NewForeignPassportRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveForeignPassportRow(NewDataSet::ForeignPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ResidencePermitRFDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnPrimaryIdentityDocument_Id;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::ResidencePermitRFRowChangeEventHandler^  ResidencePermitRFRowChanging;
        
        public: event NewDataSet::ResidencePermitRFRowChangeEventHandler^  ResidencePermitRFRowChanged;
        
        public: event NewDataSet::ResidencePermitRFRowChangeEventHandler^  ResidencePermitRFRowDeleting;
        
        public: event NewDataSet::ResidencePermitRFRowChangeEventHandler^  ResidencePermitRFRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ResidencePermitRFDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ResidencePermitRFDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ResidencePermitRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  PrimaryIdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ResidencePermitRFRow^  default [::System::Int32 ] {
            NewDataSet::ResidencePermitRFRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddResidencePermitRFRow(NewDataSet::ResidencePermitRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ResidencePermitRFRow^  AddResidencePermitRFRow(
                    System::String^  Series, 
                    System::String^  Number, 
                    System::DateTime IssueDate, 
                    System::String^  Issuer, 
                    NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ResidencePermitRF, 
                    NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ResidencePermitRF);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ResidencePermitRFRow^  NewResidencePermitRFRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveResidencePermitRFRow(NewDataSet::ResidencePermitRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class IdentityDocumentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::IdentityDocumentRowChangeEventHandler^  IdentityDocumentRowChanging;
        
        public: event NewDataSet::IdentityDocumentRowChangeEventHandler^  IdentityDocumentRowChanged;
        
        public: event NewDataSet::IdentityDocumentRowChangeEventHandler^  IdentityDocumentRowDeleting;
        
        public: event NewDataSet::IdentityDocumentRowChangeEventHandler^  IdentityDocumentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        IdentityDocumentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        IdentityDocumentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        IdentityDocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  default [::System::Int32 ] {
            NewDataSet::IdentityDocumentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddIdentityDocumentRow(NewDataSet::IdentityDocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::IdentityDocumentRow^  AddIdentityDocumentRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::IdentityDocumentRow^  NewIdentityDocumentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveIdentityDocumentRow(NewDataSet::IdentityDocumentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class InternationalPassportRFDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::InternationalPassportRFRowChangeEventHandler^  InternationalPassportRFRowChanging;
        
        public: event NewDataSet::InternationalPassportRFRowChangeEventHandler^  InternationalPassportRFRowChanged;
        
        public: event NewDataSet::InternationalPassportRFRowChangeEventHandler^  InternationalPassportRFRowDeleting;
        
        public: event NewDataSet::InternationalPassportRFRowChangeEventHandler^  InternationalPassportRFRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        InternationalPassportRFDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        InternationalPassportRFDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        InternationalPassportRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::InternationalPassportRFRow^  default [::System::Int32 ] {
            NewDataSet::InternationalPassportRFRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddInternationalPassportRFRow(NewDataSet::InternationalPassportRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::InternationalPassportRFRow^  AddInternationalPassportRFRow(System::String^  Series, System::String^  Number, 
                    System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_InternationalPassportRF);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::InternationalPassportRFRow^  NewInternationalPassportRFRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveInternationalPassportRFRow(NewDataSet::InternationalPassportRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class MilitaryPassportDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::MilitaryPassportRowChangeEventHandler^  MilitaryPassportRowChanging;
        
        public: event NewDataSet::MilitaryPassportRowChangeEventHandler^  MilitaryPassportRowChanged;
        
        public: event NewDataSet::MilitaryPassportRowChangeEventHandler^  MilitaryPassportRowDeleting;
        
        public: event NewDataSet::MilitaryPassportRowChangeEventHandler^  MilitaryPassportRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MilitaryPassportDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MilitaryPassportDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MilitaryPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::MilitaryPassportRow^  default [::System::Int32 ] {
            NewDataSet::MilitaryPassportRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddMilitaryPassportRow(NewDataSet::MilitaryPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::MilitaryPassportRow^  AddMilitaryPassportRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_MilitaryPassport);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::MilitaryPassportRow^  NewMilitaryPassportRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveMilitaryPassportRow(NewDataSet::MilitaryPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class SailorPassportDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::SailorPassportRowChangeEventHandler^  SailorPassportRowChanging;
        
        public: event NewDataSet::SailorPassportRowChangeEventHandler^  SailorPassportRowChanged;
        
        public: event NewDataSet::SailorPassportRowChangeEventHandler^  SailorPassportRowDeleting;
        
        public: event NewDataSet::SailorPassportRowChangeEventHandler^  SailorPassportRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SailorPassportDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SailorPassportDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SailorPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::SailorPassportRow^  default [::System::Int32 ] {
            NewDataSet::SailorPassportRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddSailorPassportRow(NewDataSet::SailorPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::SailorPassportRow^  AddSailorPassportRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_SailorPassport);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::SailorPassportRow^  NewSailorPassportRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveSailorPassportRow(NewDataSet::SailorPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class SovietPassportDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::SovietPassportRowChangeEventHandler^  SovietPassportRowChanging;
        
        public: event NewDataSet::SovietPassportRowChangeEventHandler^  SovietPassportRowChanged;
        
        public: event NewDataSet::SovietPassportRowChangeEventHandler^  SovietPassportRowDeleting;
        
        public: event NewDataSet::SovietPassportRowChangeEventHandler^  SovietPassportRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SovietPassportDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SovietPassportDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SovietPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::SovietPassportRow^  default [::System::Int32 ] {
            NewDataSet::SovietPassportRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddSovietPassportRow(NewDataSet::SovietPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::SovietPassportRow^  AddSovietPassportRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_SovietPassport);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::SovietPassportRow^  NewSovietPassportRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveSovietPassportRow(NewDataSet::SovietPassportRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class BirthCertificateDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::BirthCertificateRowChangeEventHandler^  BirthCertificateRowChanging;
        
        public: event NewDataSet::BirthCertificateRowChangeEventHandler^  BirthCertificateRowChanged;
        
        public: event NewDataSet::BirthCertificateRowChangeEventHandler^  BirthCertificateRowDeleting;
        
        public: event NewDataSet::BirthCertificateRowChangeEventHandler^  BirthCertificateRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        BirthCertificateDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        BirthCertificateDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        BirthCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::BirthCertificateRow^  default [::System::Int32 ] {
            NewDataSet::BirthCertificateRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddBirthCertificateRow(NewDataSet::BirthCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::BirthCertificateRow^  AddBirthCertificateRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_BirthCertificate);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::BirthCertificateRow^  NewBirthCertificateRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveBirthCertificateRow(NewDataSet::BirthCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class DrivingLicenseRFDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::DrivingLicenseRFRowChangeEventHandler^  DrivingLicenseRFRowChanging;
        
        public: event NewDataSet::DrivingLicenseRFRowChangeEventHandler^  DrivingLicenseRFRowChanged;
        
        public: event NewDataSet::DrivingLicenseRFRowChangeEventHandler^  DrivingLicenseRFRowDeleting;
        
        public: event NewDataSet::DrivingLicenseRFRowChangeEventHandler^  DrivingLicenseRFRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DrivingLicenseRFDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DrivingLicenseRFDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DrivingLicenseRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::DrivingLicenseRFRow^  default [::System::Int32 ] {
            NewDataSet::DrivingLicenseRFRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddDrivingLicenseRFRow(NewDataSet::DrivingLicenseRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::DrivingLicenseRFRow^  AddDrivingLicenseRFRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_DrivingLicenseRF);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::DrivingLicenseRFRow^  NewDrivingLicenseRFRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveDrivingLicenseRFRow(NewDataSet::DrivingLicenseRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ReleaseCertificateDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::ReleaseCertificateRowChangeEventHandler^  ReleaseCertificateRowChanging;
        
        public: event NewDataSet::ReleaseCertificateRowChangeEventHandler^  ReleaseCertificateRowChanged;
        
        public: event NewDataSet::ReleaseCertificateRowChangeEventHandler^  ReleaseCertificateRowDeleting;
        
        public: event NewDataSet::ReleaseCertificateRowChangeEventHandler^  ReleaseCertificateRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ReleaseCertificateDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ReleaseCertificateDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ReleaseCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ReleaseCertificateRow^  default [::System::Int32 ] {
            NewDataSet::ReleaseCertificateRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddReleaseCertificateRow(NewDataSet::ReleaseCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ReleaseCertificateRow^  AddReleaseCertificateRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ReleaseCertificate);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::ReleaseCertificateRow^  NewReleaseCertificateRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveReleaseCertificateRow(NewDataSet::ReleaseCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PassportLossCertificateDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::PassportLossCertificateRowChangeEventHandler^  PassportLossCertificateRowChanging;
        
        public: event NewDataSet::PassportLossCertificateRowChangeEventHandler^  PassportLossCertificateRowChanged;
        
        public: event NewDataSet::PassportLossCertificateRowChangeEventHandler^  PassportLossCertificateRowDeleting;
        
        public: event NewDataSet::PassportLossCertificateRowChangeEventHandler^  PassportLossCertificateRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportLossCertificateDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportLossCertificateDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportLossCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PassportLossCertificateRow^  default [::System::Int32 ] {
            NewDataSet::PassportLossCertificateRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddPassportLossCertificateRow(NewDataSet::PassportLossCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PassportLossCertificateRow^  AddPassportLossCertificateRow(System::String^  Series, System::String^  Number, 
                    System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_PassportLossCertificate);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::PassportLossCertificateRow^  NewPassportLossCertificateRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemovePassportLossCertificateRow(NewDataSet::PassportLossCertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class Form9CertificateDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::Form9CertificateRowChangeEventHandler^  Form9CertificateRowChanging;
        
        public: event NewDataSet::Form9CertificateRowChangeEventHandler^  Form9CertificateRowChanged;
        
        public: event NewDataSet::Form9CertificateRowChangeEventHandler^  Form9CertificateRowDeleting;
        
        public: event NewDataSet::Form9CertificateRowChangeEventHandler^  Form9CertificateRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Form9CertificateDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Form9CertificateDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Form9CertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::Form9CertificateRow^  default [::System::Int32 ] {
            NewDataSet::Form9CertificateRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddForm9CertificateRow(NewDataSet::Form9CertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::Form9CertificateRow^  AddForm9CertificateRow(System::String^  Series, System::String^  Number, System::DateTime IssueDate, 
                    System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_Form9Certificate);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::Form9CertificateRow^  NewForm9CertificateRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveForm9CertificateRow(NewDataSet::Form9CertificateRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class TemporaryIdentityCardRFDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSeries;
        
        private: ::System::Data::DataColumn^  columnNumber;
        
        private: ::System::Data::DataColumn^  columnIssueDate;
        
        private: ::System::Data::DataColumn^  columnIssuer;
        
        private: ::System::Data::DataColumn^  columnIdentityDocument_Id;
        
        public: event NewDataSet::TemporaryIdentityCardRFRowChangeEventHandler^  TemporaryIdentityCardRFRowChanging;
        
        public: event NewDataSet::TemporaryIdentityCardRFRowChangeEventHandler^  TemporaryIdentityCardRFRowChanged;
        
        public: event NewDataSet::TemporaryIdentityCardRFRowChangeEventHandler^  TemporaryIdentityCardRFRowDeleting;
        
        public: event NewDataSet::TemporaryIdentityCardRFRowChangeEventHandler^  TemporaryIdentityCardRFRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        TemporaryIdentityCardRFDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        TemporaryIdentityCardRFDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        TemporaryIdentityCardRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  SeriesColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  NumberColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssueDateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IssuerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataColumn^  IdentityDocument_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::TemporaryIdentityCardRFRow^  default [::System::Int32 ] {
            NewDataSet::TemporaryIdentityCardRFRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void AddTemporaryIdentityCardRFRow(NewDataSet::TemporaryIdentityCardRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::TemporaryIdentityCardRFRow^  AddTemporaryIdentityCardRFRow(System::String^  Series, System::String^  Number, 
                    System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_TemporaryIdentityCardRF);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet::TemporaryIdentityCardRFRow^  NewTemporaryIdentityCardRFRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void RemoveTemporaryIdentityCardRFRow(NewDataSet::TemporaryIdentityCardRFRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class AttachmentRefRow : public ::System::Data::DataRow {
        
        private: NewDataSet::AttachmentRefDataTable^  tableAttachmentRef;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AttachmentRefRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  attachmentId {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsattachmentIdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetattachmentIdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PrimaryIdentityDocumentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PrimaryIdentityDocumentDataTable^  tablePrimaryIdentityDocument;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PrimaryIdentityDocumentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 PrimaryIdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::PassportRFRow^  >^  GetPassportRFRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::ForeignPassportRow^  >^  GetForeignPassportRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::ResidencePermitRFRow^  >^  GetResidencePermitRFRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PassportRFRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PassportRFDataTable^  tablePassportRF;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportRFRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 PrimaryIdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PrimaryIdentityDocumentRow^  PrimaryIdentityDocumentRow {
            NewDataSet::PrimaryIdentityDocumentRow^  get();
            System::Void set(NewDataSet::PrimaryIdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ForeignPassportRow : public ::System::Data::DataRow {
        
        private: NewDataSet::ForeignPassportDataTable^  tableForeignPassport;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ForeignPassportRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 PrimaryIdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PrimaryIdentityDocumentRow^  PrimaryIdentityDocumentRow {
            NewDataSet::PrimaryIdentityDocumentRow^  get();
            System::Void set(NewDataSet::PrimaryIdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ResidencePermitRFRow : public ::System::Data::DataRow {
        
        private: NewDataSet::ResidencePermitRFDataTable^  tableResidencePermitRF;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ResidencePermitRFRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 PrimaryIdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PrimaryIdentityDocumentRow^  PrimaryIdentityDocumentRow {
            NewDataSet::PrimaryIdentityDocumentRow^  get();
            System::Void set(NewDataSet::PrimaryIdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetPrimaryIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class IdentityDocumentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::IdentityDocumentDataTable^  tableIdentityDocument;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        IdentityDocumentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::PassportRFRow^  >^  GetPassportRFRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::ForeignPassportRow^  >^  GetForeignPassportRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::ResidencePermitRFRow^  >^  GetResidencePermitRFRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::InternationalPassportRFRow^  >^  GetInternationalPassportRFRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::MilitaryPassportRow^  >^  GetMilitaryPassportRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::SailorPassportRow^  >^  GetSailorPassportRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::SovietPassportRow^  >^  GetSovietPassportRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::BirthCertificateRow^  >^  GetBirthCertificateRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::DrivingLicenseRFRow^  >^  GetDrivingLicenseRFRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::ReleaseCertificateRow^  >^  GetReleaseCertificateRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::PassportLossCertificateRow^  >^  GetPassportLossCertificateRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::Form9CertificateRow^  >^  GetForm9CertificateRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        cli::array< NewDataSet::TemporaryIdentityCardRFRow^  >^  GetTemporaryIdentityCardRFRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class InternationalPassportRFRow : public ::System::Data::DataRow {
        
        private: NewDataSet::InternationalPassportRFDataTable^  tableInternationalPassportRF;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        InternationalPassportRFRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class MilitaryPassportRow : public ::System::Data::DataRow {
        
        private: NewDataSet::MilitaryPassportDataTable^  tableMilitaryPassport;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MilitaryPassportRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class SailorPassportRow : public ::System::Data::DataRow {
        
        private: NewDataSet::SailorPassportDataTable^  tableSailorPassport;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SailorPassportRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class SovietPassportRow : public ::System::Data::DataRow {
        
        private: NewDataSet::SovietPassportDataTable^  tableSovietPassport;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SovietPassportRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class BirthCertificateRow : public ::System::Data::DataRow {
        
        private: NewDataSet::BirthCertificateDataTable^  tableBirthCertificate;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        BirthCertificateRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class DrivingLicenseRFRow : public ::System::Data::DataRow {
        
        private: NewDataSet::DrivingLicenseRFDataTable^  tableDrivingLicenseRF;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DrivingLicenseRFRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ReleaseCertificateRow : public ::System::Data::DataRow {
        
        private: NewDataSet::ReleaseCertificateDataTable^  tableReleaseCertificate;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ReleaseCertificateRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PassportLossCertificateRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PassportLossCertificateDataTable^  tablePassportLossCertificate;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportLossCertificateRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class Form9CertificateRow : public ::System::Data::DataRow {
        
        private: NewDataSet::Form9CertificateDataTable^  tableForm9Certificate;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Form9CertificateRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class TemporaryIdentityCardRFRow : public ::System::Data::DataRow {
        
        private: NewDataSet::TemporaryIdentityCardRFDataTable^  tableTemporaryIdentityCardRF;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        TemporaryIdentityCardRFRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Series {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Number {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::DateTime IssueDate {
            System::DateTime get();
            System::Void set(System::DateTime value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::String^  Issuer {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property System::Int32 IdentityDocument_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  IdentityDocumentRow {
            NewDataSet::IdentityDocumentRow^  get();
            System::Void set(NewDataSet::IdentityDocumentRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetSeriesNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean IsIdentityDocument_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SetIdentityDocument_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class AttachmentRefRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::AttachmentRefRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        AttachmentRefRowChangeEvent(NewDataSet::AttachmentRefRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::AttachmentRefRow^  Row {
            NewDataSet::AttachmentRefRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PrimaryIdentityDocumentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PrimaryIdentityDocumentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PrimaryIdentityDocumentRowChangeEvent(NewDataSet::PrimaryIdentityDocumentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PrimaryIdentityDocumentRow^  Row {
            NewDataSet::PrimaryIdentityDocumentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PassportRFRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PassportRFRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportRFRowChangeEvent(NewDataSet::PassportRFRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PassportRFRow^  Row {
            NewDataSet::PassportRFRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ForeignPassportRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::ForeignPassportRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ForeignPassportRowChangeEvent(NewDataSet::ForeignPassportRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ForeignPassportRow^  Row {
            NewDataSet::ForeignPassportRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ResidencePermitRFRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::ResidencePermitRFRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ResidencePermitRFRowChangeEvent(NewDataSet::ResidencePermitRFRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ResidencePermitRFRow^  Row {
            NewDataSet::ResidencePermitRFRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class IdentityDocumentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::IdentityDocumentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        IdentityDocumentRowChangeEvent(NewDataSet::IdentityDocumentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::IdentityDocumentRow^  Row {
            NewDataSet::IdentityDocumentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class InternationalPassportRFRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::InternationalPassportRFRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        InternationalPassportRFRowChangeEvent(NewDataSet::InternationalPassportRFRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::InternationalPassportRFRow^  Row {
            NewDataSet::InternationalPassportRFRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class MilitaryPassportRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::MilitaryPassportRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        MilitaryPassportRowChangeEvent(NewDataSet::MilitaryPassportRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::MilitaryPassportRow^  Row {
            NewDataSet::MilitaryPassportRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class SailorPassportRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::SailorPassportRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SailorPassportRowChangeEvent(NewDataSet::SailorPassportRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::SailorPassportRow^  Row {
            NewDataSet::SailorPassportRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class SovietPassportRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::SovietPassportRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        SovietPassportRowChangeEvent(NewDataSet::SovietPassportRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::SovietPassportRow^  Row {
            NewDataSet::SovietPassportRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class BirthCertificateRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::BirthCertificateRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        BirthCertificateRowChangeEvent(NewDataSet::BirthCertificateRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::BirthCertificateRow^  Row {
            NewDataSet::BirthCertificateRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class DrivingLicenseRFRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::DrivingLicenseRFRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        DrivingLicenseRFRowChangeEvent(NewDataSet::DrivingLicenseRFRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::DrivingLicenseRFRow^  Row {
            NewDataSet::DrivingLicenseRFRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class ReleaseCertificateRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::ReleaseCertificateRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ReleaseCertificateRowChangeEvent(NewDataSet::ReleaseCertificateRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::ReleaseCertificateRow^  Row {
            NewDataSet::ReleaseCertificateRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class PassportLossCertificateRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PassportLossCertificateRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        PassportLossCertificateRowChangeEvent(NewDataSet::PassportLossCertificateRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::PassportLossCertificateRow^  Row {
            NewDataSet::PassportLossCertificateRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class Form9CertificateRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::Form9CertificateRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        Form9CertificateRowChangeEvent(NewDataSet::Form9CertificateRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::Form9CertificateRow^  Row {
            NewDataSet::Form9CertificateRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
    ref class TemporaryIdentityCardRFRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::TemporaryIdentityCardRFRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        TemporaryIdentityCardRFRowChangeEvent(NewDataSet::TemporaryIdentityCardRFRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property NewDataSet::TemporaryIdentityCardRFRow^  Row {
            NewDataSet::TemporaryIdentityCardRFRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"AttachmentRef"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::AttachmentRefDataTable(ds->Tables[L"AttachmentRef"])));
        }
        if (ds->Tables[L"PrimaryIdentityDocument"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PrimaryIdentityDocumentDataTable(ds->Tables[L"PrimaryIdentityDocument"])));
        }
        if (ds->Tables[L"PassportRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PassportRFDataTable(ds->Tables[L"PassportRF"])));
        }
        if (ds->Tables[L"ForeignPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ForeignPassportDataTable(ds->Tables[L"ForeignPassport"])));
        }
        if (ds->Tables[L"ResidencePermitRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ResidencePermitRFDataTable(ds->Tables[L"ResidencePermitRF"])));
        }
        if (ds->Tables[L"IdentityDocument"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::IdentityDocumentDataTable(ds->Tables[L"IdentityDocument"])));
        }
        if (ds->Tables[L"InternationalPassportRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::InternationalPassportRFDataTable(ds->Tables[L"InternationalPassportRF"])));
        }
        if (ds->Tables[L"MilitaryPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::MilitaryPassportDataTable(ds->Tables[L"MilitaryPassport"])));
        }
        if (ds->Tables[L"SailorPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SailorPassportDataTable(ds->Tables[L"SailorPassport"])));
        }
        if (ds->Tables[L"SovietPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SovietPassportDataTable(ds->Tables[L"SovietPassport"])));
        }
        if (ds->Tables[L"BirthCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::BirthCertificateDataTable(ds->Tables[L"BirthCertificate"])));
        }
        if (ds->Tables[L"DrivingLicenseRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DrivingLicenseRFDataTable(ds->Tables[L"DrivingLicenseRF"])));
        }
        if (ds->Tables[L"ReleaseCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ReleaseCertificateDataTable(ds->Tables[L"ReleaseCertificate"])));
        }
        if (ds->Tables[L"PassportLossCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PassportLossCertificateDataTable(ds->Tables[L"PassportLossCertificate"])));
        }
        if (ds->Tables[L"Form9Certificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::Form9CertificateDataTable(ds->Tables[L"Form9Certificate"])));
        }
        if (ds->Tables[L"TemporaryIdentityCardRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::TemporaryIdentityCardRFDataTable(ds->Tables[L"TemporaryIdentityCardRF"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::AttachmentRefDataTable^  NewDataSet::AttachmentRef::get() {
    return this->tableAttachmentRef;
}

inline NewDataSet::PrimaryIdentityDocumentDataTable^  NewDataSet::PrimaryIdentityDocument::get() {
    return this->tablePrimaryIdentityDocument;
}

inline NewDataSet::PassportRFDataTable^  NewDataSet::PassportRF::get() {
    return this->tablePassportRF;
}

inline NewDataSet::ForeignPassportDataTable^  NewDataSet::ForeignPassport::get() {
    return this->tableForeignPassport;
}

inline NewDataSet::ResidencePermitRFDataTable^  NewDataSet::ResidencePermitRF::get() {
    return this->tableResidencePermitRF;
}

inline NewDataSet::IdentityDocumentDataTable^  NewDataSet::IdentityDocument::get() {
    return this->tableIdentityDocument;
}

inline NewDataSet::InternationalPassportRFDataTable^  NewDataSet::InternationalPassportRF::get() {
    return this->tableInternationalPassportRF;
}

inline NewDataSet::MilitaryPassportDataTable^  NewDataSet::MilitaryPassport::get() {
    return this->tableMilitaryPassport;
}

inline NewDataSet::SailorPassportDataTable^  NewDataSet::SailorPassport::get() {
    return this->tableSailorPassport;
}

inline NewDataSet::SovietPassportDataTable^  NewDataSet::SovietPassport::get() {
    return this->tableSovietPassport;
}

inline NewDataSet::BirthCertificateDataTable^  NewDataSet::BirthCertificate::get() {
    return this->tableBirthCertificate;
}

inline NewDataSet::DrivingLicenseRFDataTable^  NewDataSet::DrivingLicenseRF::get() {
    return this->tableDrivingLicenseRF;
}

inline NewDataSet::ReleaseCertificateDataTable^  NewDataSet::ReleaseCertificate::get() {
    return this->tableReleaseCertificate;
}

inline NewDataSet::PassportLossCertificateDataTable^  NewDataSet::PassportLossCertificate::get() {
    return this->tablePassportLossCertificate;
}

inline NewDataSet::Form9CertificateDataTable^  NewDataSet::Form9Certificate::get() {
    return this->tableForm9Certificate;
}

inline NewDataSet::TemporaryIdentityCardRFDataTable^  NewDataSet::TemporaryIdentityCardRF::get() {
    return this->tableTemporaryIdentityCardRF;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"AttachmentRef"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::AttachmentRefDataTable(ds->Tables[L"AttachmentRef"])));
        }
        if (ds->Tables[L"PrimaryIdentityDocument"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PrimaryIdentityDocumentDataTable(ds->Tables[L"PrimaryIdentityDocument"])));
        }
        if (ds->Tables[L"PassportRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PassportRFDataTable(ds->Tables[L"PassportRF"])));
        }
        if (ds->Tables[L"ForeignPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ForeignPassportDataTable(ds->Tables[L"ForeignPassport"])));
        }
        if (ds->Tables[L"ResidencePermitRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ResidencePermitRFDataTable(ds->Tables[L"ResidencePermitRF"])));
        }
        if (ds->Tables[L"IdentityDocument"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::IdentityDocumentDataTable(ds->Tables[L"IdentityDocument"])));
        }
        if (ds->Tables[L"InternationalPassportRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::InternationalPassportRFDataTable(ds->Tables[L"InternationalPassportRF"])));
        }
        if (ds->Tables[L"MilitaryPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::MilitaryPassportDataTable(ds->Tables[L"MilitaryPassport"])));
        }
        if (ds->Tables[L"SailorPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SailorPassportDataTable(ds->Tables[L"SailorPassport"])));
        }
        if (ds->Tables[L"SovietPassport"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SovietPassportDataTable(ds->Tables[L"SovietPassport"])));
        }
        if (ds->Tables[L"BirthCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::BirthCertificateDataTable(ds->Tables[L"BirthCertificate"])));
        }
        if (ds->Tables[L"DrivingLicenseRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::DrivingLicenseRFDataTable(ds->Tables[L"DrivingLicenseRF"])));
        }
        if (ds->Tables[L"ReleaseCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ReleaseCertificateDataTable(ds->Tables[L"ReleaseCertificate"])));
        }
        if (ds->Tables[L"PassportLossCertificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PassportLossCertificateDataTable(ds->Tables[L"PassportLossCertificate"])));
        }
        if (ds->Tables[L"Form9Certificate"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::Form9CertificateDataTable(ds->Tables[L"Form9Certificate"])));
        }
        if (ds->Tables[L"TemporaryIdentityCardRF"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::TemporaryIdentityCardRFDataTable(ds->Tables[L"TemporaryIdentityCardRF"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tableAttachmentRef = (cli::safe_cast<NewDataSet::AttachmentRefDataTable^  >(__super::Tables[L"AttachmentRef"]));
    if (initTable == true) {
        if (this->tableAttachmentRef != nullptr) {
            this->tableAttachmentRef->InitVars();
        }
    }
    this->tablePrimaryIdentityDocument = (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentDataTable^  >(__super::Tables[L"PrimaryIdentityDocument"]));
    if (initTable == true) {
        if (this->tablePrimaryIdentityDocument != nullptr) {
            this->tablePrimaryIdentityDocument->InitVars();
        }
    }
    this->tablePassportRF = (cli::safe_cast<NewDataSet::PassportRFDataTable^  >(__super::Tables[L"PassportRF"]));
    if (initTable == true) {
        if (this->tablePassportRF != nullptr) {
            this->tablePassportRF->InitVars();
        }
    }
    this->tableForeignPassport = (cli::safe_cast<NewDataSet::ForeignPassportDataTable^  >(__super::Tables[L"ForeignPassport"]));
    if (initTable == true) {
        if (this->tableForeignPassport != nullptr) {
            this->tableForeignPassport->InitVars();
        }
    }
    this->tableResidencePermitRF = (cli::safe_cast<NewDataSet::ResidencePermitRFDataTable^  >(__super::Tables[L"ResidencePermitRF"]));
    if (initTable == true) {
        if (this->tableResidencePermitRF != nullptr) {
            this->tableResidencePermitRF->InitVars();
        }
    }
    this->tableIdentityDocument = (cli::safe_cast<NewDataSet::IdentityDocumentDataTable^  >(__super::Tables[L"IdentityDocument"]));
    if (initTable == true) {
        if (this->tableIdentityDocument != nullptr) {
            this->tableIdentityDocument->InitVars();
        }
    }
    this->tableInternationalPassportRF = (cli::safe_cast<NewDataSet::InternationalPassportRFDataTable^  >(__super::Tables[L"InternationalPassportRF"]));
    if (initTable == true) {
        if (this->tableInternationalPassportRF != nullptr) {
            this->tableInternationalPassportRF->InitVars();
        }
    }
    this->tableMilitaryPassport = (cli::safe_cast<NewDataSet::MilitaryPassportDataTable^  >(__super::Tables[L"MilitaryPassport"]));
    if (initTable == true) {
        if (this->tableMilitaryPassport != nullptr) {
            this->tableMilitaryPassport->InitVars();
        }
    }
    this->tableSailorPassport = (cli::safe_cast<NewDataSet::SailorPassportDataTable^  >(__super::Tables[L"SailorPassport"]));
    if (initTable == true) {
        if (this->tableSailorPassport != nullptr) {
            this->tableSailorPassport->InitVars();
        }
    }
    this->tableSovietPassport = (cli::safe_cast<NewDataSet::SovietPassportDataTable^  >(__super::Tables[L"SovietPassport"]));
    if (initTable == true) {
        if (this->tableSovietPassport != nullptr) {
            this->tableSovietPassport->InitVars();
        }
    }
    this->tableBirthCertificate = (cli::safe_cast<NewDataSet::BirthCertificateDataTable^  >(__super::Tables[L"BirthCertificate"]));
    if (initTable == true) {
        if (this->tableBirthCertificate != nullptr) {
            this->tableBirthCertificate->InitVars();
        }
    }
    this->tableDrivingLicenseRF = (cli::safe_cast<NewDataSet::DrivingLicenseRFDataTable^  >(__super::Tables[L"DrivingLicenseRF"]));
    if (initTable == true) {
        if (this->tableDrivingLicenseRF != nullptr) {
            this->tableDrivingLicenseRF->InitVars();
        }
    }
    this->tableReleaseCertificate = (cli::safe_cast<NewDataSet::ReleaseCertificateDataTable^  >(__super::Tables[L"ReleaseCertificate"]));
    if (initTable == true) {
        if (this->tableReleaseCertificate != nullptr) {
            this->tableReleaseCertificate->InitVars();
        }
    }
    this->tablePassportLossCertificate = (cli::safe_cast<NewDataSet::PassportLossCertificateDataTable^  >(__super::Tables[L"PassportLossCertificate"]));
    if (initTable == true) {
        if (this->tablePassportLossCertificate != nullptr) {
            this->tablePassportLossCertificate->InitVars();
        }
    }
    this->tableForm9Certificate = (cli::safe_cast<NewDataSet::Form9CertificateDataTable^  >(__super::Tables[L"Form9Certificate"]));
    if (initTable == true) {
        if (this->tableForm9Certificate != nullptr) {
            this->tableForm9Certificate->InitVars();
        }
    }
    this->tableTemporaryIdentityCardRF = (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFDataTable^  >(__super::Tables[L"TemporaryIdentityCardRF"]));
    if (initTable == true) {
        if (this->tableTemporaryIdentityCardRF != nullptr) {
            this->tableTemporaryIdentityCardRF->InitVars();
        }
    }
    this->relationPrimaryIdentityDocument_PassportRF = this->Relations[L"PrimaryIdentityDocument_PassportRF"];
    this->relationIdentityDocument_PassportRF = this->Relations[L"IdentityDocument_PassportRF"];
    this->relationPrimaryIdentityDocument_ForeignPassport = this->Relations[L"PrimaryIdentityDocument_ForeignPassport"];
    this->relationIdentityDocument_ForeignPassport = this->Relations[L"IdentityDocument_ForeignPassport"];
    this->relationPrimaryIdentityDocument_ResidencePermitRF = this->Relations[L"PrimaryIdentityDocument_ResidencePermitRF"];
    this->relationIdentityDocument_ResidencePermitRF = this->Relations[L"IdentityDocument_ResidencePermitRF"];
    this->relationIdentityDocument_InternationalPassportRF = this->Relations[L"IdentityDocument_InternationalPassportRF"];
    this->relationIdentityDocument_MilitaryPassport = this->Relations[L"IdentityDocument_MilitaryPassport"];
    this->relationIdentityDocument_SailorPassport = this->Relations[L"IdentityDocument_SailorPassport"];
    this->relationIdentityDocument_SovietPassport = this->Relations[L"IdentityDocument_SovietPassport"];
    this->relationIdentityDocument_BirthCertificate = this->Relations[L"IdentityDocument_BirthCertificate"];
    this->relationIdentityDocument_DrivingLicenseRF = this->Relations[L"IdentityDocument_DrivingLicenseRF"];
    this->relationIdentityDocument_ReleaseCertificate = this->Relations[L"IdentityDocument_ReleaseCertificate"];
    this->relationIdentityDocument_PassportLossCertificate = this->Relations[L"IdentityDocument_PassportLossCertificate"];
    this->relationIdentityDocument_Form9Certificate = this->Relations[L"IdentityDocument_Form9Certificate"];
    this->relationIdentityDocument_TemporaryIdentityCardRF = this->Relations[L"IdentityDocument_TemporaryIdentityCardRF"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Namespace = L"urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableAttachmentRef = (gcnew NewDataSet::AttachmentRefDataTable());
    __super::Tables->Add(this->tableAttachmentRef);
    this->tablePrimaryIdentityDocument = (gcnew NewDataSet::PrimaryIdentityDocumentDataTable());
    __super::Tables->Add(this->tablePrimaryIdentityDocument);
    this->tablePassportRF = (gcnew NewDataSet::PassportRFDataTable());
    __super::Tables->Add(this->tablePassportRF);
    this->tableForeignPassport = (gcnew NewDataSet::ForeignPassportDataTable());
    __super::Tables->Add(this->tableForeignPassport);
    this->tableResidencePermitRF = (gcnew NewDataSet::ResidencePermitRFDataTable());
    __super::Tables->Add(this->tableResidencePermitRF);
    this->tableIdentityDocument = (gcnew NewDataSet::IdentityDocumentDataTable());
    __super::Tables->Add(this->tableIdentityDocument);
    this->tableInternationalPassportRF = (gcnew NewDataSet::InternationalPassportRFDataTable());
    __super::Tables->Add(this->tableInternationalPassportRF);
    this->tableMilitaryPassport = (gcnew NewDataSet::MilitaryPassportDataTable());
    __super::Tables->Add(this->tableMilitaryPassport);
    this->tableSailorPassport = (gcnew NewDataSet::SailorPassportDataTable());
    __super::Tables->Add(this->tableSailorPassport);
    this->tableSovietPassport = (gcnew NewDataSet::SovietPassportDataTable());
    __super::Tables->Add(this->tableSovietPassport);
    this->tableBirthCertificate = (gcnew NewDataSet::BirthCertificateDataTable());
    __super::Tables->Add(this->tableBirthCertificate);
    this->tableDrivingLicenseRF = (gcnew NewDataSet::DrivingLicenseRFDataTable());
    __super::Tables->Add(this->tableDrivingLicenseRF);
    this->tableReleaseCertificate = (gcnew NewDataSet::ReleaseCertificateDataTable());
    __super::Tables->Add(this->tableReleaseCertificate);
    this->tablePassportLossCertificate = (gcnew NewDataSet::PassportLossCertificateDataTable());
    __super::Tables->Add(this->tablePassportLossCertificate);
    this->tableForm9Certificate = (gcnew NewDataSet::Form9CertificateDataTable());
    __super::Tables->Add(this->tableForm9Certificate);
    this->tableTemporaryIdentityCardRF = (gcnew NewDataSet::TemporaryIdentityCardRFDataTable());
    __super::Tables->Add(this->tableTemporaryIdentityCardRF);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PrimaryIdentityDocument_PassportRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportRF->PrimaryIdentityDocument_IdColumn}));
    this->tablePassportRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_PassportRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportRF->IdentityDocument_IdColumn}));
    this->tablePassportRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PrimaryIdentityDocument_ForeignPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForeignPassport->PrimaryIdentityDocument_IdColumn}));
    this->tableForeignPassport->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_ForeignPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForeignPassport->IdentityDocument_IdColumn}));
    this->tableForeignPassport->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PrimaryIdentityDocument_ResidencePermitRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn}));
    this->tableResidencePermitRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_ResidencePermitRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableResidencePermitRF->IdentityDocument_IdColumn}));
    this->tableResidencePermitRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_InternationalPassportRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInternationalPassportRF->IdentityDocument_IdColumn}));
    this->tableInternationalPassportRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_MilitaryPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMilitaryPassport->IdentityDocument_IdColumn}));
    this->tableMilitaryPassport->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_SailorPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSailorPassport->IdentityDocument_IdColumn}));
    this->tableSailorPassport->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_SovietPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSovietPassport->IdentityDocument_IdColumn}));
    this->tableSovietPassport->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_BirthCertificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBirthCertificate->IdentityDocument_IdColumn}));
    this->tableBirthCertificate->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_DrivingLicenseRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDrivingLicenseRF->IdentityDocument_IdColumn}));
    this->tableDrivingLicenseRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_ReleaseCertificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableReleaseCertificate->IdentityDocument_IdColumn}));
    this->tableReleaseCertificate->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_PassportLossCertificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportLossCertificate->IdentityDocument_IdColumn}));
    this->tablePassportLossCertificate->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_Form9Certificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForm9Certificate->IdentityDocument_IdColumn}));
    this->tableForm9Certificate->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IdentityDocument_TemporaryIdentityCardRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn}));
    this->tableTemporaryIdentityCardRF->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationPrimaryIdentityDocument_PassportRF = (gcnew ::System::Data::DataRelation(L"PrimaryIdentityDocument_PassportRF", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportRF->PrimaryIdentityDocument_IdColumn}, false));
    this->relationPrimaryIdentityDocument_PassportRF->Nested = true;
    this->Relations->Add(this->relationPrimaryIdentityDocument_PassportRF);
    this->relationIdentityDocument_PassportRF = (gcnew ::System::Data::DataRelation(L"IdentityDocument_PassportRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportRF->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_PassportRF->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_PassportRF);
    this->relationPrimaryIdentityDocument_ForeignPassport = (gcnew ::System::Data::DataRelation(L"PrimaryIdentityDocument_ForeignPassport", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForeignPassport->PrimaryIdentityDocument_IdColumn}, false));
    this->relationPrimaryIdentityDocument_ForeignPassport->Nested = true;
    this->Relations->Add(this->relationPrimaryIdentityDocument_ForeignPassport);
    this->relationIdentityDocument_ForeignPassport = (gcnew ::System::Data::DataRelation(L"IdentityDocument_ForeignPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForeignPassport->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_ForeignPassport->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_ForeignPassport);
    this->relationPrimaryIdentityDocument_ResidencePermitRF = (gcnew ::System::Data::DataRelation(L"PrimaryIdentityDocument_ResidencePermitRF", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn}, false));
    this->relationPrimaryIdentityDocument_ResidencePermitRF->Nested = true;
    this->Relations->Add(this->relationPrimaryIdentityDocument_ResidencePermitRF);
    this->relationIdentityDocument_ResidencePermitRF = (gcnew ::System::Data::DataRelation(L"IdentityDocument_ResidencePermitRF", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableResidencePermitRF->IdentityDocument_IdColumn}, 
        false));
    this->relationIdentityDocument_ResidencePermitRF->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_ResidencePermitRF);
    this->relationIdentityDocument_InternationalPassportRF = (gcnew ::System::Data::DataRelation(L"IdentityDocument_InternationalPassportRF", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableInternationalPassportRF->IdentityDocument_IdColumn}, 
        false));
    this->relationIdentityDocument_InternationalPassportRF->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_InternationalPassportRF);
    this->relationIdentityDocument_MilitaryPassport = (gcnew ::System::Data::DataRelation(L"IdentityDocument_MilitaryPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableMilitaryPassport->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_MilitaryPassport->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_MilitaryPassport);
    this->relationIdentityDocument_SailorPassport = (gcnew ::System::Data::DataRelation(L"IdentityDocument_SailorPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSailorPassport->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_SailorPassport->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_SailorPassport);
    this->relationIdentityDocument_SovietPassport = (gcnew ::System::Data::DataRelation(L"IdentityDocument_SovietPassport", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSovietPassport->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_SovietPassport->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_SovietPassport);
    this->relationIdentityDocument_BirthCertificate = (gcnew ::System::Data::DataRelation(L"IdentityDocument_BirthCertificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBirthCertificate->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_BirthCertificate->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_BirthCertificate);
    this->relationIdentityDocument_DrivingLicenseRF = (gcnew ::System::Data::DataRelation(L"IdentityDocument_DrivingLicenseRF", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableDrivingLicenseRF->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_DrivingLicenseRF->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_DrivingLicenseRF);
    this->relationIdentityDocument_ReleaseCertificate = (gcnew ::System::Data::DataRelation(L"IdentityDocument_ReleaseCertificate", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableReleaseCertificate->IdentityDocument_IdColumn}, 
        false));
    this->relationIdentityDocument_ReleaseCertificate->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_ReleaseCertificate);
    this->relationIdentityDocument_PassportLossCertificate = (gcnew ::System::Data::DataRelation(L"IdentityDocument_PassportLossCertificate", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePassportLossCertificate->IdentityDocument_IdColumn}, 
        false));
    this->relationIdentityDocument_PassportLossCertificate->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_PassportLossCertificate);
    this->relationIdentityDocument_Form9Certificate = (gcnew ::System::Data::DataRelation(L"IdentityDocument_Form9Certificate", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableForm9Certificate->IdentityDocument_IdColumn}, false));
    this->relationIdentityDocument_Form9Certificate->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_Form9Certificate);
    this->relationIdentityDocument_TemporaryIdentityCardRF = (gcnew ::System::Data::DataRelation(L"IdentityDocument_TemporaryIdentityCardRF", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIdentityDocument->IdentityDocument_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn}, 
        false));
    this->relationIdentityDocument_TemporaryIdentityCardRF->Nested = true;
    this->Relations->Add(this->relationIdentityDocument_TemporaryIdentityCardRF);
}

inline ::System::Boolean NewDataSet::ShouldSerializeAttachmentRef() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePrimaryIdentityDocument() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePassportRF() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeForeignPassport() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeResidencePermitRF() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeIdentityDocument() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeInternationalPassportRF() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeMilitaryPassport() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeSailorPassport() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeSovietPassport() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeBirthCertificate() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeDrivingLicenseRF() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeReleaseCertificate() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePassportLossCertificate() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeForm9Certificate() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTemporaryIdentityCardRF() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::AttachmentRefDataTable::AttachmentRefDataTable() {
    this->TableName = L"AttachmentRef";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::AttachmentRefDataTable::AttachmentRefDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::AttachmentRefDataTable::AttachmentRefDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::AttachmentRefDataTable::attachmentIdColumn::get() {
    return this->columnattachmentId;
}

inline ::System::Int32 NewDataSet::AttachmentRefDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::AttachmentRefRow^  NewDataSet::AttachmentRefDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::AttachmentRefRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::AddAttachmentRefRow(NewDataSet::AttachmentRefRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::AttachmentRefRow^  NewDataSet::AttachmentRefDataTable::AddAttachmentRefRow(System::String^  attachmentId) {
    NewDataSet::AttachmentRefRow^  rowAttachmentRefRow = (cli::safe_cast<NewDataSet::AttachmentRefRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {attachmentId};
    rowAttachmentRefRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowAttachmentRefRow);
    return rowAttachmentRefRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::AttachmentRefDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::AttachmentRefDataTable::Clone() {
    NewDataSet::AttachmentRefDataTable^  cln = (cli::safe_cast<NewDataSet::AttachmentRefDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::AttachmentRefDataTable::CreateInstance() {
    return (gcnew NewDataSet::AttachmentRefDataTable());
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::InitVars() {
    this->columnattachmentId = __super::Columns[L"attachmentId"];
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::InitClass() {
    this->columnattachmentId = (gcnew ::System::Data::DataColumn(L"attachmentId", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnattachmentId);
    this->columnattachmentId->Namespace = L"";
    this->Namespace = L"urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1";
}

inline NewDataSet::AttachmentRefRow^  NewDataSet::AttachmentRefDataTable::NewAttachmentRefRow() {
    return (cli::safe_cast<NewDataSet::AttachmentRefRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::AttachmentRefDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::AttachmentRefRow(builder));
}

inline ::System::Type^  NewDataSet::AttachmentRefDataTable::GetRowType() {
    return NewDataSet::AttachmentRefRow::typeid;
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->AttachmentRefRowChanged(this, (gcnew NewDataSet::AttachmentRefRowChangeEvent((cli::safe_cast<NewDataSet::AttachmentRefRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->AttachmentRefRowChanging(this, (gcnew NewDataSet::AttachmentRefRowChangeEvent((cli::safe_cast<NewDataSet::AttachmentRefRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->AttachmentRefRowDeleted(this, (gcnew NewDataSet::AttachmentRefRowChangeEvent((cli::safe_cast<NewDataSet::AttachmentRefRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->AttachmentRefRowDeleting(this, (gcnew NewDataSet::AttachmentRefRowChangeEvent((cli::safe_cast<NewDataSet::AttachmentRefRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::AttachmentRefDataTable::RemoveAttachmentRefRow(NewDataSet::AttachmentRefRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::AttachmentRefDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"AttachmentRefDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PrimaryIdentityDocumentDataTable::PrimaryIdentityDocumentDataTable() {
    this->TableName = L"PrimaryIdentityDocument";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PrimaryIdentityDocumentDataTable::PrimaryIdentityDocumentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PrimaryIdentityDocumentDataTable::PrimaryIdentityDocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PrimaryIdentityDocumentDataTable::PrimaryIdentityDocument_IdColumn::get() {
    return this->columnPrimaryIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::PrimaryIdentityDocumentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::PrimaryIdentityDocumentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::AddPrimaryIdentityDocumentRow(NewDataSet::PrimaryIdentityDocumentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::PrimaryIdentityDocumentDataTable::AddPrimaryIdentityDocumentRow() {
    NewDataSet::PrimaryIdentityDocumentRow^  rowPrimaryIdentityDocumentRow = (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowPrimaryIdentityDocumentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPrimaryIdentityDocumentRow);
    return rowPrimaryIdentityDocumentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PrimaryIdentityDocumentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PrimaryIdentityDocumentDataTable::Clone() {
    NewDataSet::PrimaryIdentityDocumentDataTable^  cln = (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PrimaryIdentityDocumentDataTable::CreateInstance() {
    return (gcnew NewDataSet::PrimaryIdentityDocumentDataTable());
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::InitVars() {
    this->columnPrimaryIdentityDocument_Id = __super::Columns[L"PrimaryIdentityDocument_Id"];
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::InitClass() {
    this->columnPrimaryIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"PrimaryIdentityDocument_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPrimaryIdentityDocument_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPrimaryIdentityDocument_Id}, 
            true)));
    this->columnPrimaryIdentityDocument_Id->AutoIncrement = true;
    this->columnPrimaryIdentityDocument_Id->AllowDBNull = false;
    this->columnPrimaryIdentityDocument_Id->Unique = true;
    this->Namespace = L"urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1";
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::PrimaryIdentityDocumentDataTable::NewPrimaryIdentityDocumentRow() {
    return (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PrimaryIdentityDocumentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PrimaryIdentityDocumentRow(builder));
}

inline ::System::Type^  NewDataSet::PrimaryIdentityDocumentDataTable::GetRowType() {
    return NewDataSet::PrimaryIdentityDocumentRow::typeid;
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PrimaryIdentityDocumentRowChanged(this, (gcnew NewDataSet::PrimaryIdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PrimaryIdentityDocumentRowChanging(this, (gcnew NewDataSet::PrimaryIdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PrimaryIdentityDocumentRowDeleted(this, (gcnew NewDataSet::PrimaryIdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PrimaryIdentityDocumentRowDeleting(this, (gcnew NewDataSet::PrimaryIdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PrimaryIdentityDocumentDataTable::RemovePrimaryIdentityDocumentRow(NewDataSet::PrimaryIdentityDocumentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PrimaryIdentityDocumentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PrimaryIdentityDocumentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PassportRFDataTable::PassportRFDataTable() {
    this->TableName = L"PassportRF";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PassportRFDataTable::PassportRFDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PassportRFDataTable::PassportRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::PrimaryIdentityDocument_IdColumn::get() {
    return this->columnPrimaryIdentityDocument_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportRFDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::PassportRFDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PassportRFRow^  NewDataSet::PassportRFDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PassportRFRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PassportRFDataTable::AddPassportRFRow(NewDataSet::PassportRFRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PassportRFRow^  NewDataSet::PassportRFDataTable::AddPassportRFRow(
            System::String^  Series, 
            System::String^  Number, 
            System::DateTime IssueDate, 
            System::String^  Issuer, 
            NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_PassportRF, 
            NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_PassportRF) {
    NewDataSet::PassportRFRow^  rowPassportRFRow = (cli::safe_cast<NewDataSet::PassportRFRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {Series, Number, IssueDate, 
        Issuer, nullptr, nullptr};
    if (parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_PassportRF != nullptr) {
        columnValuesArray[4] = parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_PassportRF[0];
    }
    if (parentIdentityDocumentRowByIdentityDocument_PassportRF != nullptr) {
        columnValuesArray[5] = parentIdentityDocumentRowByIdentityDocument_PassportRF[0];
    }
    rowPassportRFRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPassportRFRow);
    return rowPassportRFRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PassportRFDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PassportRFDataTable::Clone() {
    NewDataSet::PassportRFDataTable^  cln = (cli::safe_cast<NewDataSet::PassportRFDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PassportRFDataTable::CreateInstance() {
    return (gcnew NewDataSet::PassportRFDataTable());
}

inline ::System::Void NewDataSet::PassportRFDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnPrimaryIdentityDocument_Id = __super::Columns[L"PrimaryIdentityDocument_Id"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::PassportRFDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnPrimaryIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"PrimaryIdentityDocument_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPrimaryIdentityDocument_Id);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::PassportRFRow^  NewDataSet::PassportRFDataTable::NewPassportRFRow() {
    return (cli::safe_cast<NewDataSet::PassportRFRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PassportRFDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PassportRFRow(builder));
}

inline ::System::Type^  NewDataSet::PassportRFDataTable::GetRowType() {
    return NewDataSet::PassportRFRow::typeid;
}

inline ::System::Void NewDataSet::PassportRFDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PassportRFRowChanged(this, (gcnew NewDataSet::PassportRFRowChangeEvent((cli::safe_cast<NewDataSet::PassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportRFDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PassportRFRowChanging(this, (gcnew NewDataSet::PassportRFRowChangeEvent((cli::safe_cast<NewDataSet::PassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportRFDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PassportRFRowDeleted(this, (gcnew NewDataSet::PassportRFRowChangeEvent((cli::safe_cast<NewDataSet::PassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportRFDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PassportRFRowDeleting(this, (gcnew NewDataSet::PassportRFRowChangeEvent((cli::safe_cast<NewDataSet::PassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportRFDataTable::RemovePassportRFRow(NewDataSet::PassportRFRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PassportRFDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PassportRFDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::ForeignPassportDataTable::ForeignPassportDataTable() {
    this->TableName = L"ForeignPassport";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::ForeignPassportDataTable::ForeignPassportDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ForeignPassportDataTable::ForeignPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::PrimaryIdentityDocument_IdColumn::get() {
    return this->columnPrimaryIdentityDocument_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::ForeignPassportDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::ForeignPassportDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::ForeignPassportRow^  NewDataSet::ForeignPassportDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::ForeignPassportRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::AddForeignPassportRow(NewDataSet::ForeignPassportRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::ForeignPassportRow^  NewDataSet::ForeignPassportDataTable::AddForeignPassportRow(
            System::String^  Series, 
            System::String^  Number, 
            System::DateTime IssueDate, 
            System::String^  Issuer, 
            NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ForeignPassport, 
            NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ForeignPassport) {
    NewDataSet::ForeignPassportRow^  rowForeignPassportRow = (cli::safe_cast<NewDataSet::ForeignPassportRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {Series, Number, IssueDate, 
        Issuer, nullptr, nullptr};
    if (parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ForeignPassport != nullptr) {
        columnValuesArray[4] = parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ForeignPassport[0];
    }
    if (parentIdentityDocumentRowByIdentityDocument_ForeignPassport != nullptr) {
        columnValuesArray[5] = parentIdentityDocumentRowByIdentityDocument_ForeignPassport[0];
    }
    rowForeignPassportRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowForeignPassportRow);
    return rowForeignPassportRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::ForeignPassportDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::ForeignPassportDataTable::Clone() {
    NewDataSet::ForeignPassportDataTable^  cln = (cli::safe_cast<NewDataSet::ForeignPassportDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::ForeignPassportDataTable::CreateInstance() {
    return (gcnew NewDataSet::ForeignPassportDataTable());
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnPrimaryIdentityDocument_Id = __super::Columns[L"PrimaryIdentityDocument_Id"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnPrimaryIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"PrimaryIdentityDocument_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPrimaryIdentityDocument_Id);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->MaxLength = 20;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::ForeignPassportRow^  NewDataSet::ForeignPassportDataTable::NewForeignPassportRow() {
    return (cli::safe_cast<NewDataSet::ForeignPassportRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::ForeignPassportDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::ForeignPassportRow(builder));
}

inline ::System::Type^  NewDataSet::ForeignPassportDataTable::GetRowType() {
    return NewDataSet::ForeignPassportRow::typeid;
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ForeignPassportRowChanged(this, (gcnew NewDataSet::ForeignPassportRowChangeEvent((cli::safe_cast<NewDataSet::ForeignPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ForeignPassportRowChanging(this, (gcnew NewDataSet::ForeignPassportRowChangeEvent((cli::safe_cast<NewDataSet::ForeignPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ForeignPassportRowDeleted(this, (gcnew NewDataSet::ForeignPassportRowChangeEvent((cli::safe_cast<NewDataSet::ForeignPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ForeignPassportRowDeleting(this, (gcnew NewDataSet::ForeignPassportRowChangeEvent((cli::safe_cast<NewDataSet::ForeignPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ForeignPassportDataTable::RemoveForeignPassportRow(NewDataSet::ForeignPassportRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ForeignPassportDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ForeignPassportDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::ResidencePermitRFDataTable::ResidencePermitRFDataTable() {
    this->TableName = L"ResidencePermitRF";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::ResidencePermitRFDataTable::ResidencePermitRFDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ResidencePermitRFDataTable::ResidencePermitRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::PrimaryIdentityDocument_IdColumn::get() {
    return this->columnPrimaryIdentityDocument_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::ResidencePermitRFDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::ResidencePermitRFDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::ResidencePermitRFRow^  NewDataSet::ResidencePermitRFDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::AddResidencePermitRFRow(NewDataSet::ResidencePermitRFRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::ResidencePermitRFRow^  NewDataSet::ResidencePermitRFDataTable::AddResidencePermitRFRow(
            System::String^  Series, 
            System::String^  Number, 
            System::DateTime IssueDate, 
            System::String^  Issuer, 
            NewDataSet::PrimaryIdentityDocumentRow^  parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ResidencePermitRF, 
            NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ResidencePermitRF) {
    NewDataSet::ResidencePermitRFRow^  rowResidencePermitRFRow = (cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {Series, Number, IssueDate, 
        Issuer, nullptr, nullptr};
    if (parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ResidencePermitRF != nullptr) {
        columnValuesArray[4] = parentPrimaryIdentityDocumentRowByPrimaryIdentityDocument_ResidencePermitRF[0];
    }
    if (parentIdentityDocumentRowByIdentityDocument_ResidencePermitRF != nullptr) {
        columnValuesArray[5] = parentIdentityDocumentRowByIdentityDocument_ResidencePermitRF[0];
    }
    rowResidencePermitRFRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowResidencePermitRFRow);
    return rowResidencePermitRFRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::ResidencePermitRFDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::ResidencePermitRFDataTable::Clone() {
    NewDataSet::ResidencePermitRFDataTable^  cln = (cli::safe_cast<NewDataSet::ResidencePermitRFDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::ResidencePermitRFDataTable::CreateInstance() {
    return (gcnew NewDataSet::ResidencePermitRFDataTable());
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnPrimaryIdentityDocument_Id = __super::Columns[L"PrimaryIdentityDocument_Id"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnPrimaryIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"PrimaryIdentityDocument_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPrimaryIdentityDocument_Id);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::ResidencePermitRFRow^  NewDataSet::ResidencePermitRFDataTable::NewResidencePermitRFRow() {
    return (cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::ResidencePermitRFDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::ResidencePermitRFRow(builder));
}

inline ::System::Type^  NewDataSet::ResidencePermitRFDataTable::GetRowType() {
    return NewDataSet::ResidencePermitRFRow::typeid;
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ResidencePermitRFRowChanged(this, (gcnew NewDataSet::ResidencePermitRFRowChangeEvent((cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ResidencePermitRFRowChanging(this, (gcnew NewDataSet::ResidencePermitRFRowChangeEvent((cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ResidencePermitRFRowDeleted(this, (gcnew NewDataSet::ResidencePermitRFRowChangeEvent((cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ResidencePermitRFRowDeleting(this, (gcnew NewDataSet::ResidencePermitRFRowChangeEvent((cli::safe_cast<NewDataSet::ResidencePermitRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ResidencePermitRFDataTable::RemoveResidencePermitRFRow(NewDataSet::ResidencePermitRFRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ResidencePermitRFDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ResidencePermitRFDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::IdentityDocumentDataTable::IdentityDocumentDataTable() {
    this->TableName = L"IdentityDocument";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::IdentityDocumentDataTable::IdentityDocumentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::IdentityDocumentDataTable::IdentityDocumentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::IdentityDocumentDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::IdentityDocumentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::IdentityDocumentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::AddIdentityDocumentRow(NewDataSet::IdentityDocumentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::IdentityDocumentDataTable::AddIdentityDocumentRow() {
    NewDataSet::IdentityDocumentRow^  rowIdentityDocumentRow = (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowIdentityDocumentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowIdentityDocumentRow);
    return rowIdentityDocumentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::IdentityDocumentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::IdentityDocumentDataTable::Clone() {
    NewDataSet::IdentityDocumentDataTable^  cln = (cli::safe_cast<NewDataSet::IdentityDocumentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::IdentityDocumentDataTable::CreateInstance() {
    return (gcnew NewDataSet::IdentityDocumentDataTable());
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::InitVars() {
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::InitClass() {
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnIdentityDocument_Id}, 
            true)));
    this->columnIdentityDocument_Id->AutoIncrement = true;
    this->columnIdentityDocument_Id->AllowDBNull = false;
    this->columnIdentityDocument_Id->Unique = true;
    this->Namespace = L"urn://x-artefacts-smev-gov-ru/supplementary/commons/1.0.1";
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::IdentityDocumentDataTable::NewIdentityDocumentRow() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::IdentityDocumentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::IdentityDocumentRow(builder));
}

inline ::System::Type^  NewDataSet::IdentityDocumentDataTable::GetRowType() {
    return NewDataSet::IdentityDocumentRow::typeid;
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->IdentityDocumentRowChanged(this, (gcnew NewDataSet::IdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->IdentityDocumentRowChanging(this, (gcnew NewDataSet::IdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->IdentityDocumentRowDeleted(this, (gcnew NewDataSet::IdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->IdentityDocumentRowDeleting(this, (gcnew NewDataSet::IdentityDocumentRowChangeEvent((cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::IdentityDocumentDataTable::RemoveIdentityDocumentRow(NewDataSet::IdentityDocumentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::IdentityDocumentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"IdentityDocumentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::InternationalPassportRFDataTable::InternationalPassportRFDataTable() {
    this->TableName = L"InternationalPassportRF";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::InternationalPassportRFDataTable::InternationalPassportRFDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::InternationalPassportRFDataTable::InternationalPassportRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::InternationalPassportRFDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::InternationalPassportRFDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::InternationalPassportRFDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::InternationalPassportRFDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::InternationalPassportRFDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::InternationalPassportRFDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::InternationalPassportRFRow^  NewDataSet::InternationalPassportRFDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::AddInternationalPassportRFRow(NewDataSet::InternationalPassportRFRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::InternationalPassportRFRow^  NewDataSet::InternationalPassportRFDataTable::AddInternationalPassportRFRow(
            System::String^  Series, System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_InternationalPassportRF) {
    NewDataSet::InternationalPassportRFRow^  rowInternationalPassportRFRow = (cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_InternationalPassportRF != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_InternationalPassportRF[0];
    }
    rowInternationalPassportRFRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowInternationalPassportRFRow);
    return rowInternationalPassportRFRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::InternationalPassportRFDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::InternationalPassportRFDataTable::Clone() {
    NewDataSet::InternationalPassportRFDataTable^  cln = (cli::safe_cast<NewDataSet::InternationalPassportRFDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::InternationalPassportRFDataTable::CreateInstance() {
    return (gcnew NewDataSet::InternationalPassportRFDataTable());
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::InternationalPassportRFRow^  NewDataSet::InternationalPassportRFDataTable::NewInternationalPassportRFRow() {
    return (cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::InternationalPassportRFDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::InternationalPassportRFRow(builder));
}

inline ::System::Type^  NewDataSet::InternationalPassportRFDataTable::GetRowType() {
    return NewDataSet::InternationalPassportRFRow::typeid;
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->InternationalPassportRFRowChanged(this, (gcnew NewDataSet::InternationalPassportRFRowChangeEvent((cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->InternationalPassportRFRowChanging(this, (gcnew NewDataSet::InternationalPassportRFRowChangeEvent((cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->InternationalPassportRFRowDeleted(this, (gcnew NewDataSet::InternationalPassportRFRowChangeEvent((cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->InternationalPassportRFRowDeleting(this, (gcnew NewDataSet::InternationalPassportRFRowChangeEvent((cli::safe_cast<NewDataSet::InternationalPassportRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::InternationalPassportRFDataTable::RemoveInternationalPassportRFRow(NewDataSet::InternationalPassportRFRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::InternationalPassportRFDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"InternationalPassportRFDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::MilitaryPassportDataTable::MilitaryPassportDataTable() {
    this->TableName = L"MilitaryPassport";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::MilitaryPassportDataTable::MilitaryPassportDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::MilitaryPassportDataTable::MilitaryPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::MilitaryPassportDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::MilitaryPassportDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::MilitaryPassportDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::MilitaryPassportDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::MilitaryPassportDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::MilitaryPassportDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::MilitaryPassportRow^  NewDataSet::MilitaryPassportDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::AddMilitaryPassportRow(NewDataSet::MilitaryPassportRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::MilitaryPassportRow^  NewDataSet::MilitaryPassportDataTable::AddMilitaryPassportRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_MilitaryPassport) {
    NewDataSet::MilitaryPassportRow^  rowMilitaryPassportRow = (cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_MilitaryPassport != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_MilitaryPassport[0];
    }
    rowMilitaryPassportRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowMilitaryPassportRow);
    return rowMilitaryPassportRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::MilitaryPassportDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::MilitaryPassportDataTable::Clone() {
    NewDataSet::MilitaryPassportDataTable^  cln = (cli::safe_cast<NewDataSet::MilitaryPassportDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::MilitaryPassportDataTable::CreateInstance() {
    return (gcnew NewDataSet::MilitaryPassportDataTable());
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::MilitaryPassportRow^  NewDataSet::MilitaryPassportDataTable::NewMilitaryPassportRow() {
    return (cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::MilitaryPassportDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::MilitaryPassportRow(builder));
}

inline ::System::Type^  NewDataSet::MilitaryPassportDataTable::GetRowType() {
    return NewDataSet::MilitaryPassportRow::typeid;
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->MilitaryPassportRowChanged(this, (gcnew NewDataSet::MilitaryPassportRowChangeEvent((cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->MilitaryPassportRowChanging(this, (gcnew NewDataSet::MilitaryPassportRowChangeEvent((cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->MilitaryPassportRowDeleted(this, (gcnew NewDataSet::MilitaryPassportRowChangeEvent((cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->MilitaryPassportRowDeleting(this, (gcnew NewDataSet::MilitaryPassportRowChangeEvent((cli::safe_cast<NewDataSet::MilitaryPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::MilitaryPassportDataTable::RemoveMilitaryPassportRow(NewDataSet::MilitaryPassportRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::MilitaryPassportDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"MilitaryPassportDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::SailorPassportDataTable::SailorPassportDataTable() {
    this->TableName = L"SailorPassport";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::SailorPassportDataTable::SailorPassportDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::SailorPassportDataTable::SailorPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::SailorPassportDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::SailorPassportDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::SailorPassportDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::SailorPassportDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::SailorPassportDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::SailorPassportDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::SailorPassportRow^  NewDataSet::SailorPassportDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::SailorPassportRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::SailorPassportDataTable::AddSailorPassportRow(NewDataSet::SailorPassportRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::SailorPassportRow^  NewDataSet::SailorPassportDataTable::AddSailorPassportRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_SailorPassport) {
    NewDataSet::SailorPassportRow^  rowSailorPassportRow = (cli::safe_cast<NewDataSet::SailorPassportRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_SailorPassport != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_SailorPassport[0];
    }
    rowSailorPassportRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowSailorPassportRow);
    return rowSailorPassportRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::SailorPassportDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::SailorPassportDataTable::Clone() {
    NewDataSet::SailorPassportDataTable^  cln = (cli::safe_cast<NewDataSet::SailorPassportDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::SailorPassportDataTable::CreateInstance() {
    return (gcnew NewDataSet::SailorPassportDataTable());
}

inline ::System::Void NewDataSet::SailorPassportDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::SailorPassportDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::SailorPassportRow^  NewDataSet::SailorPassportDataTable::NewSailorPassportRow() {
    return (cli::safe_cast<NewDataSet::SailorPassportRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::SailorPassportDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::SailorPassportRow(builder));
}

inline ::System::Type^  NewDataSet::SailorPassportDataTable::GetRowType() {
    return NewDataSet::SailorPassportRow::typeid;
}

inline ::System::Void NewDataSet::SailorPassportDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->SailorPassportRowChanged(this, (gcnew NewDataSet::SailorPassportRowChangeEvent((cli::safe_cast<NewDataSet::SailorPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SailorPassportDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->SailorPassportRowChanging(this, (gcnew NewDataSet::SailorPassportRowChangeEvent((cli::safe_cast<NewDataSet::SailorPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SailorPassportDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->SailorPassportRowDeleted(this, (gcnew NewDataSet::SailorPassportRowChangeEvent((cli::safe_cast<NewDataSet::SailorPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SailorPassportDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->SailorPassportRowDeleting(this, (gcnew NewDataSet::SailorPassportRowChangeEvent((cli::safe_cast<NewDataSet::SailorPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SailorPassportDataTable::RemoveSailorPassportRow(NewDataSet::SailorPassportRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SailorPassportDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"SailorPassportDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::SovietPassportDataTable::SovietPassportDataTable() {
    this->TableName = L"SovietPassport";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::SovietPassportDataTable::SovietPassportDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::SovietPassportDataTable::SovietPassportDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::SovietPassportDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::SovietPassportDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::SovietPassportDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::SovietPassportDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::SovietPassportDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::SovietPassportDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::SovietPassportRow^  NewDataSet::SovietPassportDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::SovietPassportRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::SovietPassportDataTable::AddSovietPassportRow(NewDataSet::SovietPassportRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::SovietPassportRow^  NewDataSet::SovietPassportDataTable::AddSovietPassportRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_SovietPassport) {
    NewDataSet::SovietPassportRow^  rowSovietPassportRow = (cli::safe_cast<NewDataSet::SovietPassportRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_SovietPassport != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_SovietPassport[0];
    }
    rowSovietPassportRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowSovietPassportRow);
    return rowSovietPassportRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::SovietPassportDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::SovietPassportDataTable::Clone() {
    NewDataSet::SovietPassportDataTable^  cln = (cli::safe_cast<NewDataSet::SovietPassportDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::SovietPassportDataTable::CreateInstance() {
    return (gcnew NewDataSet::SovietPassportDataTable());
}

inline ::System::Void NewDataSet::SovietPassportDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::SovietPassportDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnSeries->MaxLength = 6;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::SovietPassportRow^  NewDataSet::SovietPassportDataTable::NewSovietPassportRow() {
    return (cli::safe_cast<NewDataSet::SovietPassportRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::SovietPassportDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::SovietPassportRow(builder));
}

inline ::System::Type^  NewDataSet::SovietPassportDataTable::GetRowType() {
    return NewDataSet::SovietPassportRow::typeid;
}

inline ::System::Void NewDataSet::SovietPassportDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->SovietPassportRowChanged(this, (gcnew NewDataSet::SovietPassportRowChangeEvent((cli::safe_cast<NewDataSet::SovietPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SovietPassportDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->SovietPassportRowChanging(this, (gcnew NewDataSet::SovietPassportRowChangeEvent((cli::safe_cast<NewDataSet::SovietPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SovietPassportDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->SovietPassportRowDeleted(this, (gcnew NewDataSet::SovietPassportRowChangeEvent((cli::safe_cast<NewDataSet::SovietPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SovietPassportDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->SovietPassportRowDeleting(this, (gcnew NewDataSet::SovietPassportRowChangeEvent((cli::safe_cast<NewDataSet::SovietPassportRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SovietPassportDataTable::RemoveSovietPassportRow(NewDataSet::SovietPassportRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SovietPassportDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"SovietPassportDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::BirthCertificateDataTable::BirthCertificateDataTable() {
    this->TableName = L"BirthCertificate";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::BirthCertificateDataTable::BirthCertificateDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::BirthCertificateDataTable::BirthCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::BirthCertificateDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::BirthCertificateDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::BirthCertificateDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::BirthCertificateDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::BirthCertificateDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::BirthCertificateDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::BirthCertificateRow^  NewDataSet::BirthCertificateDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::BirthCertificateRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::AddBirthCertificateRow(NewDataSet::BirthCertificateRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::BirthCertificateRow^  NewDataSet::BirthCertificateDataTable::AddBirthCertificateRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_BirthCertificate) {
    NewDataSet::BirthCertificateRow^  rowBirthCertificateRow = (cli::safe_cast<NewDataSet::BirthCertificateRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_BirthCertificate != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_BirthCertificate[0];
    }
    rowBirthCertificateRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowBirthCertificateRow);
    return rowBirthCertificateRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::BirthCertificateDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::BirthCertificateDataTable::Clone() {
    NewDataSet::BirthCertificateDataTable^  cln = (cli::safe_cast<NewDataSet::BirthCertificateDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::BirthCertificateDataTable::CreateInstance() {
    return (gcnew NewDataSet::BirthCertificateDataTable());
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnSeries->MaxLength = 6;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::BirthCertificateRow^  NewDataSet::BirthCertificateDataTable::NewBirthCertificateRow() {
    return (cli::safe_cast<NewDataSet::BirthCertificateRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::BirthCertificateDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::BirthCertificateRow(builder));
}

inline ::System::Type^  NewDataSet::BirthCertificateDataTable::GetRowType() {
    return NewDataSet::BirthCertificateRow::typeid;
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->BirthCertificateRowChanged(this, (gcnew NewDataSet::BirthCertificateRowChangeEvent((cli::safe_cast<NewDataSet::BirthCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->BirthCertificateRowChanging(this, (gcnew NewDataSet::BirthCertificateRowChangeEvent((cli::safe_cast<NewDataSet::BirthCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->BirthCertificateRowDeleted(this, (gcnew NewDataSet::BirthCertificateRowChangeEvent((cli::safe_cast<NewDataSet::BirthCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->BirthCertificateRowDeleting(this, (gcnew NewDataSet::BirthCertificateRowChangeEvent((cli::safe_cast<NewDataSet::BirthCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::BirthCertificateDataTable::RemoveBirthCertificateRow(NewDataSet::BirthCertificateRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::BirthCertificateDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"BirthCertificateDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::DrivingLicenseRFDataTable::DrivingLicenseRFDataTable() {
    this->TableName = L"DrivingLicenseRF";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::DrivingLicenseRFDataTable::DrivingLicenseRFDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::DrivingLicenseRFDataTable::DrivingLicenseRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::DrivingLicenseRFDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::DrivingLicenseRFDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::DrivingLicenseRFDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::DrivingLicenseRFDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::DrivingLicenseRFDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::DrivingLicenseRFDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::DrivingLicenseRFRow^  NewDataSet::DrivingLicenseRFDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::AddDrivingLicenseRFRow(NewDataSet::DrivingLicenseRFRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::DrivingLicenseRFRow^  NewDataSet::DrivingLicenseRFDataTable::AddDrivingLicenseRFRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_DrivingLicenseRF) {
    NewDataSet::DrivingLicenseRFRow^  rowDrivingLicenseRFRow = (cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_DrivingLicenseRF != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_DrivingLicenseRF[0];
    }
    rowDrivingLicenseRFRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowDrivingLicenseRFRow);
    return rowDrivingLicenseRFRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::DrivingLicenseRFDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::DrivingLicenseRFDataTable::Clone() {
    NewDataSet::DrivingLicenseRFDataTable^  cln = (cli::safe_cast<NewDataSet::DrivingLicenseRFDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::DrivingLicenseRFDataTable::CreateInstance() {
    return (gcnew NewDataSet::DrivingLicenseRFDataTable());
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->AllowDBNull = false;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::DrivingLicenseRFRow^  NewDataSet::DrivingLicenseRFDataTable::NewDrivingLicenseRFRow() {
    return (cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::DrivingLicenseRFDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::DrivingLicenseRFRow(builder));
}

inline ::System::Type^  NewDataSet::DrivingLicenseRFDataTable::GetRowType() {
    return NewDataSet::DrivingLicenseRFRow::typeid;
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->DrivingLicenseRFRowChanged(this, (gcnew NewDataSet::DrivingLicenseRFRowChangeEvent((cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->DrivingLicenseRFRowChanging(this, (gcnew NewDataSet::DrivingLicenseRFRowChangeEvent((cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->DrivingLicenseRFRowDeleted(this, (gcnew NewDataSet::DrivingLicenseRFRowChangeEvent((cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->DrivingLicenseRFRowDeleting(this, (gcnew NewDataSet::DrivingLicenseRFRowChangeEvent((cli::safe_cast<NewDataSet::DrivingLicenseRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::DrivingLicenseRFDataTable::RemoveDrivingLicenseRFRow(NewDataSet::DrivingLicenseRFRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::DrivingLicenseRFDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"DrivingLicenseRFDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::ReleaseCertificateDataTable::ReleaseCertificateDataTable() {
    this->TableName = L"ReleaseCertificate";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::ReleaseCertificateDataTable::ReleaseCertificateDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ReleaseCertificateDataTable::ReleaseCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::ReleaseCertificateDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::ReleaseCertificateDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::ReleaseCertificateDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::ReleaseCertificateDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::ReleaseCertificateDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::ReleaseCertificateDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::ReleaseCertificateRow^  NewDataSet::ReleaseCertificateDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::AddReleaseCertificateRow(NewDataSet::ReleaseCertificateRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::ReleaseCertificateRow^  NewDataSet::ReleaseCertificateDataTable::AddReleaseCertificateRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_ReleaseCertificate) {
    NewDataSet::ReleaseCertificateRow^  rowReleaseCertificateRow = (cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_ReleaseCertificate != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_ReleaseCertificate[0];
    }
    rowReleaseCertificateRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowReleaseCertificateRow);
    return rowReleaseCertificateRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::ReleaseCertificateDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::ReleaseCertificateDataTable::Clone() {
    NewDataSet::ReleaseCertificateDataTable^  cln = (cli::safe_cast<NewDataSet::ReleaseCertificateDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::ReleaseCertificateDataTable::CreateInstance() {
    return (gcnew NewDataSet::ReleaseCertificateDataTable());
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->MaxLength = 20;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::ReleaseCertificateRow^  NewDataSet::ReleaseCertificateDataTable::NewReleaseCertificateRow() {
    return (cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::ReleaseCertificateDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::ReleaseCertificateRow(builder));
}

inline ::System::Type^  NewDataSet::ReleaseCertificateDataTable::GetRowType() {
    return NewDataSet::ReleaseCertificateRow::typeid;
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ReleaseCertificateRowChanged(this, (gcnew NewDataSet::ReleaseCertificateRowChangeEvent((cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ReleaseCertificateRowChanging(this, (gcnew NewDataSet::ReleaseCertificateRowChangeEvent((cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ReleaseCertificateRowDeleted(this, (gcnew NewDataSet::ReleaseCertificateRowChangeEvent((cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ReleaseCertificateRowDeleting(this, (gcnew NewDataSet::ReleaseCertificateRowChangeEvent((cli::safe_cast<NewDataSet::ReleaseCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::ReleaseCertificateDataTable::RemoveReleaseCertificateRow(NewDataSet::ReleaseCertificateRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ReleaseCertificateDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ReleaseCertificateDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PassportLossCertificateDataTable::PassportLossCertificateDataTable() {
    this->TableName = L"PassportLossCertificate";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PassportLossCertificateDataTable::PassportLossCertificateDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PassportLossCertificateDataTable::PassportLossCertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PassportLossCertificateDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportLossCertificateDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportLossCertificateDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportLossCertificateDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::PassportLossCertificateDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::PassportLossCertificateDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PassportLossCertificateRow^  NewDataSet::PassportLossCertificateDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::AddPassportLossCertificateRow(NewDataSet::PassportLossCertificateRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PassportLossCertificateRow^  NewDataSet::PassportLossCertificateDataTable::AddPassportLossCertificateRow(
            System::String^  Series, System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_PassportLossCertificate) {
    NewDataSet::PassportLossCertificateRow^  rowPassportLossCertificateRow = (cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_PassportLossCertificate != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_PassportLossCertificate[0];
    }
    rowPassportLossCertificateRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPassportLossCertificateRow);
    return rowPassportLossCertificateRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PassportLossCertificateDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PassportLossCertificateDataTable::Clone() {
    NewDataSet::PassportLossCertificateDataTable^  cln = (cli::safe_cast<NewDataSet::PassportLossCertificateDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PassportLossCertificateDataTable::CreateInstance() {
    return (gcnew NewDataSet::PassportLossCertificateDataTable());
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->MaxLength = 20;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::PassportLossCertificateRow^  NewDataSet::PassportLossCertificateDataTable::NewPassportLossCertificateRow() {
    return (cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PassportLossCertificateDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PassportLossCertificateRow(builder));
}

inline ::System::Type^  NewDataSet::PassportLossCertificateDataTable::GetRowType() {
    return NewDataSet::PassportLossCertificateRow::typeid;
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PassportLossCertificateRowChanged(this, (gcnew NewDataSet::PassportLossCertificateRowChangeEvent((cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PassportLossCertificateRowChanging(this, (gcnew NewDataSet::PassportLossCertificateRowChangeEvent((cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PassportLossCertificateRowDeleted(this, (gcnew NewDataSet::PassportLossCertificateRowChangeEvent((cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PassportLossCertificateRowDeleting(this, (gcnew NewDataSet::PassportLossCertificateRowChangeEvent((cli::safe_cast<NewDataSet::PassportLossCertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PassportLossCertificateDataTable::RemovePassportLossCertificateRow(NewDataSet::PassportLossCertificateRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PassportLossCertificateDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PassportLossCertificateDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::Form9CertificateDataTable::Form9CertificateDataTable() {
    this->TableName = L"Form9Certificate";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::Form9CertificateDataTable::Form9CertificateDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::Form9CertificateDataTable::Form9CertificateDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::Form9CertificateDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::Form9CertificateDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::Form9CertificateDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::Form9CertificateDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::Form9CertificateDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::Form9CertificateDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::Form9CertificateRow^  NewDataSet::Form9CertificateDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::Form9CertificateRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::AddForm9CertificateRow(NewDataSet::Form9CertificateRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::Form9CertificateRow^  NewDataSet::Form9CertificateDataTable::AddForm9CertificateRow(System::String^  Series, 
            System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_Form9Certificate) {
    NewDataSet::Form9CertificateRow^  rowForm9CertificateRow = (cli::safe_cast<NewDataSet::Form9CertificateRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_Form9Certificate != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_Form9Certificate[0];
    }
    rowForm9CertificateRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowForm9CertificateRow);
    return rowForm9CertificateRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::Form9CertificateDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::Form9CertificateDataTable::Clone() {
    NewDataSet::Form9CertificateDataTable^  cln = (cli::safe_cast<NewDataSet::Form9CertificateDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::Form9CertificateDataTable::CreateInstance() {
    return (gcnew NewDataSet::Form9CertificateDataTable());
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->MaxLength = 20;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::Form9CertificateRow^  NewDataSet::Form9CertificateDataTable::NewForm9CertificateRow() {
    return (cli::safe_cast<NewDataSet::Form9CertificateRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::Form9CertificateDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::Form9CertificateRow(builder));
}

inline ::System::Type^  NewDataSet::Form9CertificateDataTable::GetRowType() {
    return NewDataSet::Form9CertificateRow::typeid;
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->Form9CertificateRowChanged(this, (gcnew NewDataSet::Form9CertificateRowChangeEvent((cli::safe_cast<NewDataSet::Form9CertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->Form9CertificateRowChanging(this, (gcnew NewDataSet::Form9CertificateRowChangeEvent((cli::safe_cast<NewDataSet::Form9CertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->Form9CertificateRowDeleted(this, (gcnew NewDataSet::Form9CertificateRowChangeEvent((cli::safe_cast<NewDataSet::Form9CertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->Form9CertificateRowDeleting(this, (gcnew NewDataSet::Form9CertificateRowChangeEvent((cli::safe_cast<NewDataSet::Form9CertificateRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::Form9CertificateDataTable::RemoveForm9CertificateRow(NewDataSet::Form9CertificateRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::Form9CertificateDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"Form9CertificateDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::TemporaryIdentityCardRFDataTable::TemporaryIdentityCardRFDataTable() {
    this->TableName = L"TemporaryIdentityCardRF";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::TemporaryIdentityCardRFDataTable::TemporaryIdentityCardRFDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::TemporaryIdentityCardRFDataTable::TemporaryIdentityCardRFDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::TemporaryIdentityCardRFDataTable::SeriesColumn::get() {
    return this->columnSeries;
}

inline ::System::Data::DataColumn^  NewDataSet::TemporaryIdentityCardRFDataTable::NumberColumn::get() {
    return this->columnNumber;
}

inline ::System::Data::DataColumn^  NewDataSet::TemporaryIdentityCardRFDataTable::IssueDateColumn::get() {
    return this->columnIssueDate;
}

inline ::System::Data::DataColumn^  NewDataSet::TemporaryIdentityCardRFDataTable::IssuerColumn::get() {
    return this->columnIssuer;
}

inline ::System::Data::DataColumn^  NewDataSet::TemporaryIdentityCardRFDataTable::IdentityDocument_IdColumn::get() {
    return this->columnIdentityDocument_Id;
}

inline ::System::Int32 NewDataSet::TemporaryIdentityCardRFDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::TemporaryIdentityCardRFRow^  NewDataSet::TemporaryIdentityCardRFDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::AddTemporaryIdentityCardRFRow(NewDataSet::TemporaryIdentityCardRFRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::TemporaryIdentityCardRFRow^  NewDataSet::TemporaryIdentityCardRFDataTable::AddTemporaryIdentityCardRFRow(
            System::String^  Series, System::String^  Number, System::DateTime IssueDate, System::String^  Issuer, NewDataSet::IdentityDocumentRow^  parentIdentityDocumentRowByIdentityDocument_TemporaryIdentityCardRF) {
    NewDataSet::TemporaryIdentityCardRFRow^  rowTemporaryIdentityCardRFRow = (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {Series, Number, IssueDate, 
        Issuer, nullptr};
    if (parentIdentityDocumentRowByIdentityDocument_TemporaryIdentityCardRF != nullptr) {
        columnValuesArray[4] = parentIdentityDocumentRowByIdentityDocument_TemporaryIdentityCardRF[0];
    }
    rowTemporaryIdentityCardRFRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowTemporaryIdentityCardRFRow);
    return rowTemporaryIdentityCardRFRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::TemporaryIdentityCardRFDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::TemporaryIdentityCardRFDataTable::Clone() {
    NewDataSet::TemporaryIdentityCardRFDataTable^  cln = (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::TemporaryIdentityCardRFDataTable::CreateInstance() {
    return (gcnew NewDataSet::TemporaryIdentityCardRFDataTable());
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::InitVars() {
    this->columnSeries = __super::Columns[L"Series"];
    this->columnNumber = __super::Columns[L"Number"];
    this->columnIssueDate = __super::Columns[L"IssueDate"];
    this->columnIssuer = __super::Columns[L"Issuer"];
    this->columnIdentityDocument_Id = __super::Columns[L"IdentityDocument_Id"];
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::InitClass() {
    this->columnSeries = (gcnew ::System::Data::DataColumn(L"Series", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSeries);
    this->columnNumber = (gcnew ::System::Data::DataColumn(L"Number", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNumber);
    this->columnIssueDate = (gcnew ::System::Data::DataColumn(L"IssueDate", ::System::DateTime::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssueDate);
    this->columnIssuer = (gcnew ::System::Data::DataColumn(L"Issuer", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnIssuer);
    this->columnIdentityDocument_Id = (gcnew ::System::Data::DataColumn(L"IdentityDocument_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIdentityDocument_Id);
    this->columnSeries->MaxLength = 20;
    this->columnNumber->AllowDBNull = false;
    this->columnIssueDate->AllowDBNull = false;
    this->columnIssuer->AllowDBNull = false;
    this->columnIssuer->MaxLength = 200;
}

inline NewDataSet::TemporaryIdentityCardRFRow^  NewDataSet::TemporaryIdentityCardRFDataTable::NewTemporaryIdentityCardRFRow() {
    return (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::TemporaryIdentityCardRFDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::TemporaryIdentityCardRFRow(builder));
}

inline ::System::Type^  NewDataSet::TemporaryIdentityCardRFDataTable::GetRowType() {
    return NewDataSet::TemporaryIdentityCardRFRow::typeid;
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->TemporaryIdentityCardRFRowChanged(this, (gcnew NewDataSet::TemporaryIdentityCardRFRowChangeEvent((cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->TemporaryIdentityCardRFRowChanging(this, (gcnew NewDataSet::TemporaryIdentityCardRFRowChangeEvent((cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->TemporaryIdentityCardRFRowDeleted(this, (gcnew NewDataSet::TemporaryIdentityCardRFRowChangeEvent((cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->TemporaryIdentityCardRFRowDeleting(this, (gcnew NewDataSet::TemporaryIdentityCardRFRowChangeEvent((cli::safe_cast<NewDataSet::TemporaryIdentityCardRFRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFDataTable::RemoveTemporaryIdentityCardRFRow(NewDataSet::TemporaryIdentityCardRFRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TemporaryIdentityCardRFDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"TemporaryIdentityCardRFDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::AttachmentRefRow::AttachmentRefRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableAttachmentRef = (cli::safe_cast<NewDataSet::AttachmentRefDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::AttachmentRefRow::attachmentId::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableAttachmentRef->attachmentIdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'attachmentId\' in table \'AttachmentRef\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::AttachmentRefRow::attachmentId::set(System::String^  value) {
    this[this->tableAttachmentRef->attachmentIdColumn] = value;
}

inline ::System::Boolean NewDataSet::AttachmentRefRow::IsattachmentIdNull() {
    return this->IsNull(this->tableAttachmentRef->attachmentIdColumn);
}

inline ::System::Void NewDataSet::AttachmentRefRow::SetattachmentIdNull() {
    this[this->tableAttachmentRef->attachmentIdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::PrimaryIdentityDocumentRow::PrimaryIdentityDocumentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePrimaryIdentityDocument = (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::PrimaryIdentityDocumentRow::PrimaryIdentityDocument_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn]));
}
inline System::Void NewDataSet::PrimaryIdentityDocumentRow::PrimaryIdentityDocument_Id::set(System::Int32 value) {
    this[this->tablePrimaryIdentityDocument->PrimaryIdentityDocument_IdColumn] = value;
}

inline cli::array< NewDataSet::PassportRFRow^  >^  NewDataSet::PrimaryIdentityDocumentRow::GetPassportRFRows() {
    if (this->Table->ChildRelations[L"PrimaryIdentityDocument_PassportRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::PassportRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PassportRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PrimaryIdentityDocument_PassportRF"])));
    }
}

inline cli::array< NewDataSet::ForeignPassportRow^  >^  NewDataSet::PrimaryIdentityDocumentRow::GetForeignPassportRows() {
    if (this->Table->ChildRelations[L"PrimaryIdentityDocument_ForeignPassport"] == nullptr) {
        return gcnew cli::array< NewDataSet::ForeignPassportRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ForeignPassportRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PrimaryIdentityDocument_ForeignPassport"])));
    }
}

inline cli::array< NewDataSet::ResidencePermitRFRow^  >^  NewDataSet::PrimaryIdentityDocumentRow::GetResidencePermitRFRows() {
    if (this->Table->ChildRelations[L"PrimaryIdentityDocument_ResidencePermitRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::ResidencePermitRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ResidencePermitRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PrimaryIdentityDocument_ResidencePermitRF"])));
    }
}


inline NewDataSet::PassportRFRow::PassportRFRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePassportRF = (cli::safe_cast<NewDataSet::PassportRFDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PassportRFRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePassportRF->SeriesColumn]));
}
inline System::Void NewDataSet::PassportRFRow::Series::set(System::String^  value) {
    this[this->tablePassportRF->SeriesColumn] = value;
}

inline System::String^  NewDataSet::PassportRFRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePassportRF->NumberColumn]));
}
inline System::Void NewDataSet::PassportRFRow::Number::set(System::String^  value) {
    this[this->tablePassportRF->NumberColumn] = value;
}

inline System::DateTime NewDataSet::PassportRFRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tablePassportRF->IssueDateColumn]));
}
inline System::Void NewDataSet::PassportRFRow::IssueDate::set(System::DateTime value) {
    this[this->tablePassportRF->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::PassportRFRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePassportRF->IssuerColumn]));
}
inline System::Void NewDataSet::PassportRFRow::Issuer::set(System::String^  value) {
    this[this->tablePassportRF->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::PassportRFRow::PrimaryIdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePassportRF->PrimaryIdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PrimaryIdentityDocument_Id\' in table \'PassportRF\' is DBNull" 
L".", 
            e));
    }
}
inline System::Void NewDataSet::PassportRFRow::PrimaryIdentityDocument_Id::set(System::Int32 value) {
    this[this->tablePassportRF->PrimaryIdentityDocument_IdColumn] = value;
}

inline System::Int32 NewDataSet::PassportRFRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePassportRF->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'PassportRF\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PassportRFRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tablePassportRF->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::PassportRFRow::PrimaryIdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PrimaryIdentityDocument_PassportRF"])));
}
inline System::Void NewDataSet::PassportRFRow::PrimaryIdentityDocumentRow::set(NewDataSet::PrimaryIdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PrimaryIdentityDocument_PassportRF"]);
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::PassportRFRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_PassportRF"])));
}
inline System::Void NewDataSet::PassportRFRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_PassportRF"]);
}

inline ::System::Boolean NewDataSet::PassportRFRow::IsPrimaryIdentityDocument_IdNull() {
    return this->IsNull(this->tablePassportRF->PrimaryIdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::PassportRFRow::SetPrimaryIdentityDocument_IdNull() {
    this[this->tablePassportRF->PrimaryIdentityDocument_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::PassportRFRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tablePassportRF->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::PassportRFRow::SetIdentityDocument_IdNull() {
    this[this->tablePassportRF->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::ForeignPassportRow::ForeignPassportRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableForeignPassport = (cli::safe_cast<NewDataSet::ForeignPassportDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::ForeignPassportRow::Series::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableForeignPassport->SeriesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Series\' in table \'ForeignPassport\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::ForeignPassportRow::Series::set(System::String^  value) {
    this[this->tableForeignPassport->SeriesColumn] = value;
}

inline System::String^  NewDataSet::ForeignPassportRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableForeignPassport->NumberColumn]));
}
inline System::Void NewDataSet::ForeignPassportRow::Number::set(System::String^  value) {
    this[this->tableForeignPassport->NumberColumn] = value;
}

inline System::DateTime NewDataSet::ForeignPassportRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableForeignPassport->IssueDateColumn]));
}
inline System::Void NewDataSet::ForeignPassportRow::IssueDate::set(System::DateTime value) {
    this[this->tableForeignPassport->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::ForeignPassportRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableForeignPassport->IssuerColumn]));
}
inline System::Void NewDataSet::ForeignPassportRow::Issuer::set(System::String^  value) {
    this[this->tableForeignPassport->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::ForeignPassportRow::PrimaryIdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableForeignPassport->PrimaryIdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PrimaryIdentityDocument_Id\' in table \'ForeignPassport\' is D" 
L"BNull.", 
            e));
    }
}
inline System::Void NewDataSet::ForeignPassportRow::PrimaryIdentityDocument_Id::set(System::Int32 value) {
    this[this->tableForeignPassport->PrimaryIdentityDocument_IdColumn] = value;
}

inline System::Int32 NewDataSet::ForeignPassportRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableForeignPassport->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'ForeignPassport\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::ForeignPassportRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableForeignPassport->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::ForeignPassportRow::PrimaryIdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PrimaryIdentityDocument_ForeignPassport"])));
}
inline System::Void NewDataSet::ForeignPassportRow::PrimaryIdentityDocumentRow::set(NewDataSet::PrimaryIdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PrimaryIdentityDocument_ForeignPassport"]);
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::ForeignPassportRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_ForeignPassport"])));
}
inline System::Void NewDataSet::ForeignPassportRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_ForeignPassport"]);
}

inline ::System::Boolean NewDataSet::ForeignPassportRow::IsSeriesNull() {
    return this->IsNull(this->tableForeignPassport->SeriesColumn);
}

inline ::System::Void NewDataSet::ForeignPassportRow::SetSeriesNull() {
    this[this->tableForeignPassport->SeriesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::ForeignPassportRow::IsPrimaryIdentityDocument_IdNull() {
    return this->IsNull(this->tableForeignPassport->PrimaryIdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::ForeignPassportRow::SetPrimaryIdentityDocument_IdNull() {
    this[this->tableForeignPassport->PrimaryIdentityDocument_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::ForeignPassportRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableForeignPassport->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::ForeignPassportRow::SetIdentityDocument_IdNull() {
    this[this->tableForeignPassport->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::ResidencePermitRFRow::ResidencePermitRFRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableResidencePermitRF = (cli::safe_cast<NewDataSet::ResidencePermitRFDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::ResidencePermitRFRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableResidencePermitRF->SeriesColumn]));
}
inline System::Void NewDataSet::ResidencePermitRFRow::Series::set(System::String^  value) {
    this[this->tableResidencePermitRF->SeriesColumn] = value;
}

inline System::String^  NewDataSet::ResidencePermitRFRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableResidencePermitRF->NumberColumn]));
}
inline System::Void NewDataSet::ResidencePermitRFRow::Number::set(System::String^  value) {
    this[this->tableResidencePermitRF->NumberColumn] = value;
}

inline System::DateTime NewDataSet::ResidencePermitRFRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableResidencePermitRF->IssueDateColumn]));
}
inline System::Void NewDataSet::ResidencePermitRFRow::IssueDate::set(System::DateTime value) {
    this[this->tableResidencePermitRF->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::ResidencePermitRFRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableResidencePermitRF->IssuerColumn]));
}
inline System::Void NewDataSet::ResidencePermitRFRow::Issuer::set(System::String^  value) {
    this[this->tableResidencePermitRF->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::ResidencePermitRFRow::PrimaryIdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PrimaryIdentityDocument_Id\' in table \'ResidencePermitRF\' is" 
L" DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::ResidencePermitRFRow::PrimaryIdentityDocument_Id::set(System::Int32 value) {
    this[this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn] = value;
}

inline System::Int32 NewDataSet::ResidencePermitRFRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableResidencePermitRF->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'ResidencePermitRF\' is DBNull" 
L".", 
            e));
    }
}
inline System::Void NewDataSet::ResidencePermitRFRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableResidencePermitRF->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::ResidencePermitRFRow::PrimaryIdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::PrimaryIdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PrimaryIdentityDocument_ResidencePermitRF"])));
}
inline System::Void NewDataSet::ResidencePermitRFRow::PrimaryIdentityDocumentRow::set(NewDataSet::PrimaryIdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PrimaryIdentityDocument_ResidencePermitRF"]);
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::ResidencePermitRFRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_ResidencePermitRF"])));
}
inline System::Void NewDataSet::ResidencePermitRFRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_ResidencePermitRF"]);
}

inline ::System::Boolean NewDataSet::ResidencePermitRFRow::IsPrimaryIdentityDocument_IdNull() {
    return this->IsNull(this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::ResidencePermitRFRow::SetPrimaryIdentityDocument_IdNull() {
    this[this->tableResidencePermitRF->PrimaryIdentityDocument_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::ResidencePermitRFRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableResidencePermitRF->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::ResidencePermitRFRow::SetIdentityDocument_IdNull() {
    this[this->tableResidencePermitRF->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::IdentityDocumentRow::IdentityDocumentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableIdentityDocument = (cli::safe_cast<NewDataSet::IdentityDocumentDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::IdentityDocumentRow::IdentityDocument_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableIdentityDocument->IdentityDocument_IdColumn]));
}
inline System::Void NewDataSet::IdentityDocumentRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableIdentityDocument->IdentityDocument_IdColumn] = value;
}

inline cli::array< NewDataSet::PassportRFRow^  >^  NewDataSet::IdentityDocumentRow::GetPassportRFRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_PassportRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::PassportRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PassportRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_PassportRF"])));
    }
}

inline cli::array< NewDataSet::ForeignPassportRow^  >^  NewDataSet::IdentityDocumentRow::GetForeignPassportRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_ForeignPassport"] == nullptr) {
        return gcnew cli::array< NewDataSet::ForeignPassportRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ForeignPassportRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_ForeignPassport"])));
    }
}

inline cli::array< NewDataSet::ResidencePermitRFRow^  >^  NewDataSet::IdentityDocumentRow::GetResidencePermitRFRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_ResidencePermitRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::ResidencePermitRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ResidencePermitRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_ResidencePermitRF"])));
    }
}

inline cli::array< NewDataSet::InternationalPassportRFRow^  >^  NewDataSet::IdentityDocumentRow::GetInternationalPassportRFRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_InternationalPassportRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::InternationalPassportRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::InternationalPassportRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_InternationalPassportRF"])));
    }
}

inline cli::array< NewDataSet::MilitaryPassportRow^  >^  NewDataSet::IdentityDocumentRow::GetMilitaryPassportRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_MilitaryPassport"] == nullptr) {
        return gcnew cli::array< NewDataSet::MilitaryPassportRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::MilitaryPassportRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_MilitaryPassport"])));
    }
}

inline cli::array< NewDataSet::SailorPassportRow^  >^  NewDataSet::IdentityDocumentRow::GetSailorPassportRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_SailorPassport"] == nullptr) {
        return gcnew cli::array< NewDataSet::SailorPassportRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::SailorPassportRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_SailorPassport"])));
    }
}

inline cli::array< NewDataSet::SovietPassportRow^  >^  NewDataSet::IdentityDocumentRow::GetSovietPassportRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_SovietPassport"] == nullptr) {
        return gcnew cli::array< NewDataSet::SovietPassportRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::SovietPassportRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_SovietPassport"])));
    }
}

inline cli::array< NewDataSet::BirthCertificateRow^  >^  NewDataSet::IdentityDocumentRow::GetBirthCertificateRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_BirthCertificate"] == nullptr) {
        return gcnew cli::array< NewDataSet::BirthCertificateRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::BirthCertificateRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_BirthCertificate"])));
    }
}

inline cli::array< NewDataSet::DrivingLicenseRFRow^  >^  NewDataSet::IdentityDocumentRow::GetDrivingLicenseRFRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_DrivingLicenseRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::DrivingLicenseRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::DrivingLicenseRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_DrivingLicenseRF"])));
    }
}

inline cli::array< NewDataSet::ReleaseCertificateRow^  >^  NewDataSet::IdentityDocumentRow::GetReleaseCertificateRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_ReleaseCertificate"] == nullptr) {
        return gcnew cli::array< NewDataSet::ReleaseCertificateRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ReleaseCertificateRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_ReleaseCertificate"])));
    }
}

inline cli::array< NewDataSet::PassportLossCertificateRow^  >^  NewDataSet::IdentityDocumentRow::GetPassportLossCertificateRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_PassportLossCertificate"] == nullptr) {
        return gcnew cli::array< NewDataSet::PassportLossCertificateRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PassportLossCertificateRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_PassportLossCertificate"])));
    }
}

inline cli::array< NewDataSet::Form9CertificateRow^  >^  NewDataSet::IdentityDocumentRow::GetForm9CertificateRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_Form9Certificate"] == nullptr) {
        return gcnew cli::array< NewDataSet::Form9CertificateRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::Form9CertificateRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_Form9Certificate"])));
    }
}

inline cli::array< NewDataSet::TemporaryIdentityCardRFRow^  >^  NewDataSet::IdentityDocumentRow::GetTemporaryIdentityCardRFRows() {
    if (this->Table->ChildRelations[L"IdentityDocument_TemporaryIdentityCardRF"] == nullptr) {
        return gcnew cli::array< NewDataSet::TemporaryIdentityCardRFRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::TemporaryIdentityCardRFRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IdentityDocument_TemporaryIdentityCardRF"])));
    }
}


inline NewDataSet::InternationalPassportRFRow::InternationalPassportRFRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableInternationalPassportRF = (cli::safe_cast<NewDataSet::InternationalPassportRFDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::InternationalPassportRFRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableInternationalPassportRF->SeriesColumn]));
}
inline System::Void NewDataSet::InternationalPassportRFRow::Series::set(System::String^  value) {
    this[this->tableInternationalPassportRF->SeriesColumn] = value;
}

inline System::String^  NewDataSet::InternationalPassportRFRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableInternationalPassportRF->NumberColumn]));
}
inline System::Void NewDataSet::InternationalPassportRFRow::Number::set(System::String^  value) {
    this[this->tableInternationalPassportRF->NumberColumn] = value;
}

inline System::DateTime NewDataSet::InternationalPassportRFRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableInternationalPassportRF->IssueDateColumn]));
}
inline System::Void NewDataSet::InternationalPassportRFRow::IssueDate::set(System::DateTime value) {
    this[this->tableInternationalPassportRF->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::InternationalPassportRFRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableInternationalPassportRF->IssuerColumn]));
}
inline System::Void NewDataSet::InternationalPassportRFRow::Issuer::set(System::String^  value) {
    this[this->tableInternationalPassportRF->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::InternationalPassportRFRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableInternationalPassportRF->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'InternationalPassportRF\' is " 
L"DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::InternationalPassportRFRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableInternationalPassportRF->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::InternationalPassportRFRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_InternationalPassportRF"])));
}
inline System::Void NewDataSet::InternationalPassportRFRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_InternationalPassportRF"]);
}

inline ::System::Boolean NewDataSet::InternationalPassportRFRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableInternationalPassportRF->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::InternationalPassportRFRow::SetIdentityDocument_IdNull() {
    this[this->tableInternationalPassportRF->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::MilitaryPassportRow::MilitaryPassportRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableMilitaryPassport = (cli::safe_cast<NewDataSet::MilitaryPassportDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::MilitaryPassportRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableMilitaryPassport->SeriesColumn]));
}
inline System::Void NewDataSet::MilitaryPassportRow::Series::set(System::String^  value) {
    this[this->tableMilitaryPassport->SeriesColumn] = value;
}

inline System::String^  NewDataSet::MilitaryPassportRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableMilitaryPassport->NumberColumn]));
}
inline System::Void NewDataSet::MilitaryPassportRow::Number::set(System::String^  value) {
    this[this->tableMilitaryPassport->NumberColumn] = value;
}

inline System::DateTime NewDataSet::MilitaryPassportRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableMilitaryPassport->IssueDateColumn]));
}
inline System::Void NewDataSet::MilitaryPassportRow::IssueDate::set(System::DateTime value) {
    this[this->tableMilitaryPassport->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::MilitaryPassportRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableMilitaryPassport->IssuerColumn]));
}
inline System::Void NewDataSet::MilitaryPassportRow::Issuer::set(System::String^  value) {
    this[this->tableMilitaryPassport->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::MilitaryPassportRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableMilitaryPassport->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'MilitaryPassport\' is DBNull." 
L"", 
            e));
    }
}
inline System::Void NewDataSet::MilitaryPassportRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableMilitaryPassport->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::MilitaryPassportRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_MilitaryPassport"])));
}
inline System::Void NewDataSet::MilitaryPassportRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_MilitaryPassport"]);
}

inline ::System::Boolean NewDataSet::MilitaryPassportRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableMilitaryPassport->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::MilitaryPassportRow::SetIdentityDocument_IdNull() {
    this[this->tableMilitaryPassport->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::SailorPassportRow::SailorPassportRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableSailorPassport = (cli::safe_cast<NewDataSet::SailorPassportDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::SailorPassportRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSailorPassport->SeriesColumn]));
}
inline System::Void NewDataSet::SailorPassportRow::Series::set(System::String^  value) {
    this[this->tableSailorPassport->SeriesColumn] = value;
}

inline System::String^  NewDataSet::SailorPassportRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSailorPassport->NumberColumn]));
}
inline System::Void NewDataSet::SailorPassportRow::Number::set(System::String^  value) {
    this[this->tableSailorPassport->NumberColumn] = value;
}

inline System::DateTime NewDataSet::SailorPassportRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableSailorPassport->IssueDateColumn]));
}
inline System::Void NewDataSet::SailorPassportRow::IssueDate::set(System::DateTime value) {
    this[this->tableSailorPassport->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::SailorPassportRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSailorPassport->IssuerColumn]));
}
inline System::Void NewDataSet::SailorPassportRow::Issuer::set(System::String^  value) {
    this[this->tableSailorPassport->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::SailorPassportRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableSailorPassport->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'SailorPassport\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::SailorPassportRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableSailorPassport->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::SailorPassportRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_SailorPassport"])));
}
inline System::Void NewDataSet::SailorPassportRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_SailorPassport"]);
}

inline ::System::Boolean NewDataSet::SailorPassportRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableSailorPassport->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::SailorPassportRow::SetIdentityDocument_IdNull() {
    this[this->tableSailorPassport->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::SovietPassportRow::SovietPassportRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableSovietPassport = (cli::safe_cast<NewDataSet::SovietPassportDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::SovietPassportRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSovietPassport->SeriesColumn]));
}
inline System::Void NewDataSet::SovietPassportRow::Series::set(System::String^  value) {
    this[this->tableSovietPassport->SeriesColumn] = value;
}

inline System::String^  NewDataSet::SovietPassportRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSovietPassport->NumberColumn]));
}
inline System::Void NewDataSet::SovietPassportRow::Number::set(System::String^  value) {
    this[this->tableSovietPassport->NumberColumn] = value;
}

inline System::DateTime NewDataSet::SovietPassportRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableSovietPassport->IssueDateColumn]));
}
inline System::Void NewDataSet::SovietPassportRow::IssueDate::set(System::DateTime value) {
    this[this->tableSovietPassport->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::SovietPassportRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableSovietPassport->IssuerColumn]));
}
inline System::Void NewDataSet::SovietPassportRow::Issuer::set(System::String^  value) {
    this[this->tableSovietPassport->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::SovietPassportRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableSovietPassport->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'SovietPassport\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::SovietPassportRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableSovietPassport->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::SovietPassportRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_SovietPassport"])));
}
inline System::Void NewDataSet::SovietPassportRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_SovietPassport"]);
}

inline ::System::Boolean NewDataSet::SovietPassportRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableSovietPassport->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::SovietPassportRow::SetIdentityDocument_IdNull() {
    this[this->tableSovietPassport->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::BirthCertificateRow::BirthCertificateRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableBirthCertificate = (cli::safe_cast<NewDataSet::BirthCertificateDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::BirthCertificateRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableBirthCertificate->SeriesColumn]));
}
inline System::Void NewDataSet::BirthCertificateRow::Series::set(System::String^  value) {
    this[this->tableBirthCertificate->SeriesColumn] = value;
}

inline System::String^  NewDataSet::BirthCertificateRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableBirthCertificate->NumberColumn]));
}
inline System::Void NewDataSet::BirthCertificateRow::Number::set(System::String^  value) {
    this[this->tableBirthCertificate->NumberColumn] = value;
}

inline System::DateTime NewDataSet::BirthCertificateRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableBirthCertificate->IssueDateColumn]));
}
inline System::Void NewDataSet::BirthCertificateRow::IssueDate::set(System::DateTime value) {
    this[this->tableBirthCertificate->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::BirthCertificateRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableBirthCertificate->IssuerColumn]));
}
inline System::Void NewDataSet::BirthCertificateRow::Issuer::set(System::String^  value) {
    this[this->tableBirthCertificate->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::BirthCertificateRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableBirthCertificate->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'BirthCertificate\' is DBNull." 
L"", 
            e));
    }
}
inline System::Void NewDataSet::BirthCertificateRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableBirthCertificate->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::BirthCertificateRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_BirthCertificate"])));
}
inline System::Void NewDataSet::BirthCertificateRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_BirthCertificate"]);
}

inline ::System::Boolean NewDataSet::BirthCertificateRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableBirthCertificate->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::BirthCertificateRow::SetIdentityDocument_IdNull() {
    this[this->tableBirthCertificate->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::DrivingLicenseRFRow::DrivingLicenseRFRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableDrivingLicenseRF = (cli::safe_cast<NewDataSet::DrivingLicenseRFDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::DrivingLicenseRFRow::Series::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDrivingLicenseRF->SeriesColumn]));
}
inline System::Void NewDataSet::DrivingLicenseRFRow::Series::set(System::String^  value) {
    this[this->tableDrivingLicenseRF->SeriesColumn] = value;
}

inline System::String^  NewDataSet::DrivingLicenseRFRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDrivingLicenseRF->NumberColumn]));
}
inline System::Void NewDataSet::DrivingLicenseRFRow::Number::set(System::String^  value) {
    this[this->tableDrivingLicenseRF->NumberColumn] = value;
}

inline System::DateTime NewDataSet::DrivingLicenseRFRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableDrivingLicenseRF->IssueDateColumn]));
}
inline System::Void NewDataSet::DrivingLicenseRFRow::IssueDate::set(System::DateTime value) {
    this[this->tableDrivingLicenseRF->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::DrivingLicenseRFRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableDrivingLicenseRF->IssuerColumn]));
}
inline System::Void NewDataSet::DrivingLicenseRFRow::Issuer::set(System::String^  value) {
    this[this->tableDrivingLicenseRF->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::DrivingLicenseRFRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableDrivingLicenseRF->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'DrivingLicenseRF\' is DBNull." 
L"", 
            e));
    }
}
inline System::Void NewDataSet::DrivingLicenseRFRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableDrivingLicenseRF->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::DrivingLicenseRFRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_DrivingLicenseRF"])));
}
inline System::Void NewDataSet::DrivingLicenseRFRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_DrivingLicenseRF"]);
}

inline ::System::Boolean NewDataSet::DrivingLicenseRFRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableDrivingLicenseRF->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::DrivingLicenseRFRow::SetIdentityDocument_IdNull() {
    this[this->tableDrivingLicenseRF->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::ReleaseCertificateRow::ReleaseCertificateRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableReleaseCertificate = (cli::safe_cast<NewDataSet::ReleaseCertificateDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::ReleaseCertificateRow::Series::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableReleaseCertificate->SeriesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Series\' in table \'ReleaseCertificate\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::ReleaseCertificateRow::Series::set(System::String^  value) {
    this[this->tableReleaseCertificate->SeriesColumn] = value;
}

inline System::String^  NewDataSet::ReleaseCertificateRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableReleaseCertificate->NumberColumn]));
}
inline System::Void NewDataSet::ReleaseCertificateRow::Number::set(System::String^  value) {
    this[this->tableReleaseCertificate->NumberColumn] = value;
}

inline System::DateTime NewDataSet::ReleaseCertificateRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableReleaseCertificate->IssueDateColumn]));
}
inline System::Void NewDataSet::ReleaseCertificateRow::IssueDate::set(System::DateTime value) {
    this[this->tableReleaseCertificate->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::ReleaseCertificateRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableReleaseCertificate->IssuerColumn]));
}
inline System::Void NewDataSet::ReleaseCertificateRow::Issuer::set(System::String^  value) {
    this[this->tableReleaseCertificate->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::ReleaseCertificateRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableReleaseCertificate->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'ReleaseCertificate\' is DBNul" 
L"l.", 
            e));
    }
}
inline System::Void NewDataSet::ReleaseCertificateRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableReleaseCertificate->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::ReleaseCertificateRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_ReleaseCertificate"])));
}
inline System::Void NewDataSet::ReleaseCertificateRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_ReleaseCertificate"]);
}

inline ::System::Boolean NewDataSet::ReleaseCertificateRow::IsSeriesNull() {
    return this->IsNull(this->tableReleaseCertificate->SeriesColumn);
}

inline ::System::Void NewDataSet::ReleaseCertificateRow::SetSeriesNull() {
    this[this->tableReleaseCertificate->SeriesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::ReleaseCertificateRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableReleaseCertificate->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::ReleaseCertificateRow::SetIdentityDocument_IdNull() {
    this[this->tableReleaseCertificate->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::PassportLossCertificateRow::PassportLossCertificateRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePassportLossCertificate = (cli::safe_cast<NewDataSet::PassportLossCertificateDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PassportLossCertificateRow::Series::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablePassportLossCertificate->SeriesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Series\' in table \'PassportLossCertificate\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PassportLossCertificateRow::Series::set(System::String^  value) {
    this[this->tablePassportLossCertificate->SeriesColumn] = value;
}

inline System::String^  NewDataSet::PassportLossCertificateRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePassportLossCertificate->NumberColumn]));
}
inline System::Void NewDataSet::PassportLossCertificateRow::Number::set(System::String^  value) {
    this[this->tablePassportLossCertificate->NumberColumn] = value;
}

inline System::DateTime NewDataSet::PassportLossCertificateRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tablePassportLossCertificate->IssueDateColumn]));
}
inline System::Void NewDataSet::PassportLossCertificateRow::IssueDate::set(System::DateTime value) {
    this[this->tablePassportLossCertificate->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::PassportLossCertificateRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePassportLossCertificate->IssuerColumn]));
}
inline System::Void NewDataSet::PassportLossCertificateRow::Issuer::set(System::String^  value) {
    this[this->tablePassportLossCertificate->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::PassportLossCertificateRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePassportLossCertificate->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'PassportLossCertificate\' is " 
L"DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PassportLossCertificateRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tablePassportLossCertificate->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::PassportLossCertificateRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_PassportLossCertificate"])));
}
inline System::Void NewDataSet::PassportLossCertificateRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_PassportLossCertificate"]);
}

inline ::System::Boolean NewDataSet::PassportLossCertificateRow::IsSeriesNull() {
    return this->IsNull(this->tablePassportLossCertificate->SeriesColumn);
}

inline ::System::Void NewDataSet::PassportLossCertificateRow::SetSeriesNull() {
    this[this->tablePassportLossCertificate->SeriesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::PassportLossCertificateRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tablePassportLossCertificate->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::PassportLossCertificateRow::SetIdentityDocument_IdNull() {
    this[this->tablePassportLossCertificate->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::Form9CertificateRow::Form9CertificateRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableForm9Certificate = (cli::safe_cast<NewDataSet::Form9CertificateDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::Form9CertificateRow::Series::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableForm9Certificate->SeriesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Series\' in table \'Form9Certificate\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::Form9CertificateRow::Series::set(System::String^  value) {
    this[this->tableForm9Certificate->SeriesColumn] = value;
}

inline System::String^  NewDataSet::Form9CertificateRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableForm9Certificate->NumberColumn]));
}
inline System::Void NewDataSet::Form9CertificateRow::Number::set(System::String^  value) {
    this[this->tableForm9Certificate->NumberColumn] = value;
}

inline System::DateTime NewDataSet::Form9CertificateRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableForm9Certificate->IssueDateColumn]));
}
inline System::Void NewDataSet::Form9CertificateRow::IssueDate::set(System::DateTime value) {
    this[this->tableForm9Certificate->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::Form9CertificateRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableForm9Certificate->IssuerColumn]));
}
inline System::Void NewDataSet::Form9CertificateRow::Issuer::set(System::String^  value) {
    this[this->tableForm9Certificate->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::Form9CertificateRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableForm9Certificate->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'Form9Certificate\' is DBNull." 
L"", 
            e));
    }
}
inline System::Void NewDataSet::Form9CertificateRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableForm9Certificate->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::Form9CertificateRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_Form9Certificate"])));
}
inline System::Void NewDataSet::Form9CertificateRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_Form9Certificate"]);
}

inline ::System::Boolean NewDataSet::Form9CertificateRow::IsSeriesNull() {
    return this->IsNull(this->tableForm9Certificate->SeriesColumn);
}

inline ::System::Void NewDataSet::Form9CertificateRow::SetSeriesNull() {
    this[this->tableForm9Certificate->SeriesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::Form9CertificateRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableForm9Certificate->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::Form9CertificateRow::SetIdentityDocument_IdNull() {
    this[this->tableForm9Certificate->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::TemporaryIdentityCardRFRow::TemporaryIdentityCardRFRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableTemporaryIdentityCardRF = (cli::safe_cast<NewDataSet::TemporaryIdentityCardRFDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::TemporaryIdentityCardRFRow::Series::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableTemporaryIdentityCardRF->SeriesColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Series\' in table \'TemporaryIdentityCardRF\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::Series::set(System::String^  value) {
    this[this->tableTemporaryIdentityCardRF->SeriesColumn] = value;
}

inline System::String^  NewDataSet::TemporaryIdentityCardRFRow::Number::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableTemporaryIdentityCardRF->NumberColumn]));
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::Number::set(System::String^  value) {
    this[this->tableTemporaryIdentityCardRF->NumberColumn] = value;
}

inline System::DateTime NewDataSet::TemporaryIdentityCardRFRow::IssueDate::get() {
    return (cli::safe_cast<::System::DateTime >(this[this->tableTemporaryIdentityCardRF->IssueDateColumn]));
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::IssueDate::set(System::DateTime value) {
    this[this->tableTemporaryIdentityCardRF->IssueDateColumn] = value;
}

inline System::String^  NewDataSet::TemporaryIdentityCardRFRow::Issuer::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableTemporaryIdentityCardRF->IssuerColumn]));
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::Issuer::set(System::String^  value) {
    this[this->tableTemporaryIdentityCardRF->IssuerColumn] = value;
}

inline System::Int32 NewDataSet::TemporaryIdentityCardRFRow::IdentityDocument_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IdentityDocument_Id\' in table \'TemporaryIdentityCardRF\' is " 
L"DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::IdentityDocument_Id::set(System::Int32 value) {
    this[this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn] = value;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::TemporaryIdentityCardRFRow::IdentityDocumentRow::get() {
    return (cli::safe_cast<NewDataSet::IdentityDocumentRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IdentityDocument_TemporaryIdentityCardRF"])));
}
inline System::Void NewDataSet::TemporaryIdentityCardRFRow::IdentityDocumentRow::set(NewDataSet::IdentityDocumentRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IdentityDocument_TemporaryIdentityCardRF"]);
}

inline ::System::Boolean NewDataSet::TemporaryIdentityCardRFRow::IsSeriesNull() {
    return this->IsNull(this->tableTemporaryIdentityCardRF->SeriesColumn);
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFRow::SetSeriesNull() {
    this[this->tableTemporaryIdentityCardRF->SeriesColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::TemporaryIdentityCardRFRow::IsIdentityDocument_IdNull() {
    return this->IsNull(this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn);
}

inline ::System::Void NewDataSet::TemporaryIdentityCardRFRow::SetIdentityDocument_IdNull() {
    this[this->tableTemporaryIdentityCardRF->IdentityDocument_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::AttachmentRefRowChangeEvent::AttachmentRefRowChangeEvent(NewDataSet::AttachmentRefRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::AttachmentRefRow^  NewDataSet::AttachmentRefRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::AttachmentRefRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PrimaryIdentityDocumentRowChangeEvent::PrimaryIdentityDocumentRowChangeEvent(NewDataSet::PrimaryIdentityDocumentRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PrimaryIdentityDocumentRow^  NewDataSet::PrimaryIdentityDocumentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PrimaryIdentityDocumentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PassportRFRowChangeEvent::PassportRFRowChangeEvent(NewDataSet::PassportRFRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PassportRFRow^  NewDataSet::PassportRFRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PassportRFRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::ForeignPassportRowChangeEvent::ForeignPassportRowChangeEvent(NewDataSet::ForeignPassportRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::ForeignPassportRow^  NewDataSet::ForeignPassportRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::ForeignPassportRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::ResidencePermitRFRowChangeEvent::ResidencePermitRFRowChangeEvent(NewDataSet::ResidencePermitRFRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::ResidencePermitRFRow^  NewDataSet::ResidencePermitRFRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::ResidencePermitRFRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::IdentityDocumentRowChangeEvent::IdentityDocumentRowChangeEvent(NewDataSet::IdentityDocumentRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::IdentityDocumentRow^  NewDataSet::IdentityDocumentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::IdentityDocumentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::InternationalPassportRFRowChangeEvent::InternationalPassportRFRowChangeEvent(NewDataSet::InternationalPassportRFRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::InternationalPassportRFRow^  NewDataSet::InternationalPassportRFRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::InternationalPassportRFRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::MilitaryPassportRowChangeEvent::MilitaryPassportRowChangeEvent(NewDataSet::MilitaryPassportRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::MilitaryPassportRow^  NewDataSet::MilitaryPassportRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::MilitaryPassportRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::SailorPassportRowChangeEvent::SailorPassportRowChangeEvent(NewDataSet::SailorPassportRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::SailorPassportRow^  NewDataSet::SailorPassportRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::SailorPassportRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::SovietPassportRowChangeEvent::SovietPassportRowChangeEvent(NewDataSet::SovietPassportRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::SovietPassportRow^  NewDataSet::SovietPassportRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::SovietPassportRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::BirthCertificateRowChangeEvent::BirthCertificateRowChangeEvent(NewDataSet::BirthCertificateRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::BirthCertificateRow^  NewDataSet::BirthCertificateRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::BirthCertificateRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::DrivingLicenseRFRowChangeEvent::DrivingLicenseRFRowChangeEvent(NewDataSet::DrivingLicenseRFRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::DrivingLicenseRFRow^  NewDataSet::DrivingLicenseRFRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::DrivingLicenseRFRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::ReleaseCertificateRowChangeEvent::ReleaseCertificateRowChangeEvent(NewDataSet::ReleaseCertificateRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::ReleaseCertificateRow^  NewDataSet::ReleaseCertificateRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::ReleaseCertificateRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PassportLossCertificateRowChangeEvent::PassportLossCertificateRowChangeEvent(NewDataSet::PassportLossCertificateRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PassportLossCertificateRow^  NewDataSet::PassportLossCertificateRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PassportLossCertificateRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::Form9CertificateRowChangeEvent::Form9CertificateRowChangeEvent(NewDataSet::Form9CertificateRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::Form9CertificateRow^  NewDataSet::Form9CertificateRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::Form9CertificateRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::TemporaryIdentityCardRFRowChangeEvent::TemporaryIdentityCardRFRowChangeEvent(NewDataSet::TemporaryIdentityCardRFRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::TemporaryIdentityCardRFRow^  NewDataSet::TemporaryIdentityCardRFRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::TemporaryIdentityCardRFRowChangeEvent::Action::get() {
    return this->eventAction;
}
